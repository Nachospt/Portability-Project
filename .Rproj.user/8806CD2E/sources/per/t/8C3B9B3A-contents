##   ggplot2

library(ggplot2)

## AYUDA OBJETOS
help.search("geom_", package = "ggplot2")

## HISTOGRAMA
ggplot(housing, aes(x = Home.Value)) + geom_histogram()

## EVOLUCION 2 GRUPOS
ggplot(subset(housing, State %in% c("MA", "TX")),
       aes(x=Date,
           y=Home.Value,
           color=State))+
  geom_point()

## POINTS (SCATTER PLOT)
hp2001Q1 <- subset(housing, Datehead == 20011) 
ggplot(hp2001Q1,
       aes(y = Structure.Cost, x = Land.Value)) +
  geom_point()

## BOXPLOTS
geom_boxplot()

## LINES, PREDICTION LINE
hp2001Q1$pred.SC <- predict(lm(Structure.Cost ~ Land.Value, data = hp2001Q1))

p1 <- ggplot(hp2001Q1, aes(x = Land.Value, y = Structure.Cost))

p1 + geom_point(aes(color = Home.Value)) +
  geom_line(aes(y = pred.SC))

## SMOOTHERS
p1 +
  geom_point(aes(color = Home.Value)) +
  geom_smooth()

## TEXT (LABEL POINTS)
p1 + 
  geom_text(aes(label=State), size = 3)

## LINES CONNECTING LABELS TO DOTS
install.packages("ggrepel") 
library("ggrepel")
p1 + 
  geom_point() + 
  geom_text_repel(aes(label=State), size = 3)

## AESTHETICS MAPPING VS ASSIGNEMENT

p1 +
  geom_point(size = 5, color="red")

p1 +
  geom_point(aes(size = Home.Value), color="red")

## MAPPING VARIABLES TO OTHER AESTHETICS
p1 +
  geom_point(aes(color=Home.Value, shape = region))

## STATISTICAL TRANSFORMATIONS
Each geom has a default statistic, but these can be changed. For example,
the default statistic for geom_bar is stat_count:
ggplot(housing.sum, aes(x=State, y=Home.Value)) + 
  geom_bar()
Error: stat_count() must not be used with a y aesthetic.

## SCALES
scale_<tab>

p3 <- ggplot(housing,
             aes(x = State,
                 y = Home.Price.Index)) + 
        theme(legend.position="top",
              axis.text=element_text(size = 6))
(p4 <- p3 + geom_point(aes(color = Date),
                       alpha = 0.5,
                       size = 1.5,
                       position = position_jitter(width = 0.25, height = 0)))

## Cambio de labels, breaks, y colores
p4 +
  scale_x_discrete(name="State Abbreviation") +
  scale_color_continuous(name="",
                         breaks = c(19751, 19941, 20131),
                         labels = c(1971, 1994, 2013),
                         low = "blue", high = "red")
## Colores palidos
library(scales)
p4 +
  scale_color_continuous(name="",
                         breaks = c(19751, 19941, 20131),
                         labels = c(1971, 1994, 2013),
                         low = muted("blue"), high = muted("red"))

## Color intermedio y valor intermedio
p4 +
  scale_color_gradient2(name="",
                        breaks = c(19751, 19941, 20131),
                        labels = c(1971, 1994, 2013),
                        low = muted("blue"),
                        high = muted("red"),
                        mid = "gray60",
                        midpoint = 19941)

## Faceting, problema y soluci?n
p5 <- ggplot(housing, aes(x = Date, y = Home.Value))
p5 + geom_line(aes(color = State))

(p5 <- p5 + geom_line() +
   facet_wrap(~State, ncol = 10))

## Faceting en dos dimensiones (Solo ?til uando hay pocos grupos)
(p5 <- p5 + geom_point() +
   facet_grid(~State, ncol = 10))

## Themes
p5 <- ggplot(housing, aes(x = Date, y = Home.Value))
p5 + geom_line(aes(color = State))+ theme_linedraw()

##Themes por defecto
theme_<tab>

## Themes por defecto con cambios
p5 + theme_minimal() +
  theme(text = element_text(color = "turquoise"))

## Create or modify themes
theme_new <- theme_bw() +
  theme(plot.background = element_rect(size = 1, color = "blue", fill = "black"),
        text=element_text(size = 12, family = "Serif", color = "ivory"),
        axis.text.y = element_text(colour = "purple"),
        axis.text.x = element_text(colour = "red"),
        panel.background = element_rect(fill = "pink"),
        strip.background = element_rect(fill = muted("orange")))

p5 + theme_new

## SYMBOLS (A look at all 25 symbols)
df2 <- data.frame(x = 1:5 , y = 1:25, z = 1:25)
s <- ggplot(df2, aes(x = x, y = y))
s + geom_point(aes(shape = z), size = 4) + scale_shape_identity()

## While all symbols have a foreground colour, symbols 19-25 also take a
## background colour (fill)
s + geom_point(aes(shape = z), size = 4, colour = "Red") +
  scale_shape_identity()
s + geom_point(aes(shape = z), size = 4, colour = "Red", fill = "Black") +
  scale_shape_identity()

## Remove scientific notation
scale_fill_continuous(label=comma)

##Gr?fico t?picos
library(ggplot2)

# create factors with value labels 
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
  	labels=c("3gears","4gears","5gears")) 
mtcars$am <- factor(mtcars$am,levels=c(0,1),
  	labels=c("Automatic","Manual")) 
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
   labels=c("4cyl","6cyl","8cyl")) 

# Kernel density plots for mpg
# grouped by number of gears (indicated by color)
qplot(mpg, data=mtcars, geom="density", fill=gear, alpha=I(.5), 
   main="Distribution of Gas Milage", xlab="Miles Per Gallon", 
   ylab="Density")

# Scatterplot of mpg vs. hp for each combination of gears and cylinders
# in each facet, transmittion type is represented by shape and color
qplot(hp, mpg, data=mtcars, shape=am, color=am, 
   facets=gear~cyl, size=I(3),
   xlab="Horsepower", ylab="Miles per Gallon") 

# Separate regressions of mpg on weight for each number of cylinders
qplot(wt, mpg, data=mtcars, geom=c("point", "smooth"), 
   method="lm", formula=y~x, color=cyl, 
   main="Regression of MPG on Weight", 
   xlab="Weight", ylab="Miles per Gallon")

# Boxplots of mpg by number of gears 
# observations (points) are overlayed and jittered
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"), 
   fill=gear, main="Mileage by Gear Number",
   xlab="", ylab="Miles per Gallon")

## STACKED EVOLUTION BAR PLOTS
library(ggplot2)
library(ggthemes)
library(scales)

G.Evo1 = ggplot(DF1, aes(x = ANIO.REPORTE, fill = HECHO.VICTIMIZANTE)) +
  geom_bar() +
  scale_x_continuous(limits = c(1995,2017)) +
  scale_y_continuous(name = "Casos")
G.Evo1 + theme_stata() + scale_fill_stata() + theme(legend.position = "right", axis.text.x  = element_text(angle=45, vjust=0.5, size=8))

## Colors9264D0

## 2 spectrum colours
spec2colours = c("#AE1C3E", "#D24D3E", "#ED875E", "#F9BD7E", "#FFE3AA", "#FFFAD2", "#E6F5FE", "#B4DDF7", "#77B7E5", "#3A89C9", "#3D52A1")

spec2colours = c("#FF6464", "#F6646D", "#ED6476", "#E4647F", "#DB6488", "#D26491", "#C8649A", "#BF64A3", "#B664AC", "#AD64B5",
                 "#A464BE", "#9B64C7", "#9264D0", "#8964D9", "#8064E2", "#7764EB", "#6E64F4", "#6564FD", "#5C64FF")


spec2colours = c("#3d52a1", "#4d60a5", "#5d6ea9", "#6e7cad", "#7e8ab1", "#8e98b5", "#9ea6ba", "#aeb4be", "#f8e7c6",
                 "#f1d5b9", "#ebc3ad", "#e4b0a1", "#dd9e94", "#d78b88", "#c9666f", "#c25463", "#bb4157", "#b52e4a", "#ae1c3e")
