################################### Portabilidad Shiny ###################################
#### INDEX #### 

## 1.Preliminar steps
  # 1.1 Data Load
  # 1.2 Library Load
## 2.Server Configuration
  # 2.1 Shinyapps.io login
  # 2.2 Shinyapp.io deployment
## 3.Data Manipulation
  # 3.1 Creating Porta.2 table
  # 3.2 Removing self-portabilities
## 4.Shiny Application
  # 4.1 Adjustements
  # 4.2 ui and server
  # 4.3 Running the app


#### 1.Preliminar steps
  # 1.1 Data Load
setwd("C:\\Users\\a1380\\Desktop\\Portability Project")
Porta.1 = read.csv("C:\\Users\\a1380\\Desktop\\data.csv")

  # 1.2 Library Load
library(ggplot2)
library(data.table)
library(dplyr)
library(readr)
library(lattice)
library(shiny)
library(shinythemes)
library(rsconnect)
library(DT)

#### 2.Server Configuration ####
  # 2.1 Shinyapps.io login
secret = readLines(con = "C:/Users/a1380/Documents/CredencialShiny.txt")
rsconnect::setAccountInfo(name='nspproject',
                          token='84DA9E67B476250E326ED7FAB04F4E9E',
                          secret=secret)
  # 2.2 Shinyapp.io deployment
rsconnect::deployApp("C:/Users/a1380/Desktop/Portability Project")

#### 3.Data Manipulation ####

options(scipen=999)
names(Porta.1)[1] = "ano.mes"

  ## 3.1 Creating Porta.2 table

Porta.2 = Porta.1

Porta.2$Exportaciones = apply(Porta.1, 1, FUN = function(x) {
  TargetRow = intersect(which(Porta.1$Donante.Grupo == x["Operador.Grupo"]), intersect(which(Porta.1$Operador.Grupo == x["Donante.Grupo"]), which(Porta.1$ano.mes == x["ano.mes"])))
  Porta.1$Importaciones[TargetRow]
})

  ## 3.2 Removing self-portabilities
Porta.2 = Porta.2[-which(Porta.2$Donante.Grupo == Porta.2$Operador.Grupo),]

#### 4.Shiny Application ####

  ## 4.1 Adjustment

zones = data.frame(c(1,1,1,1,2,2,2,2), c(0, 0, 300000, 0, 300000, 300000, 0, 0), c(0, 300000, 300000, 0, 0, 300000, 0, 0), c("#FD625E", "#FD625E", "#FD625E", "#FD625E", "#66CC00", "#66CC00", "#66CC00", "#66CC00"))
colnames(zones) = c("group", "Importaciones", "Exportaciones", "color")

  ## 4.2 ui and server
  
ui <- fluidPage(theme = shinytheme("cerulean"),
  
  # App title
  column(width = 8,titlePanel("CdM Portability Spain", windowTitle = "Portabilidad"), offset = 3),
  
  # Sidebar layout with a input and output definitions
  sidebarLayout(
    
    # Inputs
    sidebarPanel( width = 3,
      
      h3("Selection"),      # Third level header: Selection

      # Select Operator
      selectInput(inputId = "Operator", 
                  label = "Operator:",
                  choices = c("Vodafone", "Movistar", "Orange", "Masmovil", "Resto"),
                  selected = "Vodafone"
      ),
      
      # Select Years
      selectInput(inputId = "MinYear", 
                  label = "MinimumYear:",
                  choices = levels(as.factor(Porta.2$ano.mes)),
                  selected = "1712"
    ),
      
      # Built with Shiny by RStudio
      br(),
      h5("Built with",
         img(src = "https://www.rstudio.com/wp-content/uploads/2014/04/shiny.png", height = "30px"),
         "by"),
      h5("Ignacio SÃ¡nchez Puente"),
    img(src = "image.png", height = "50px")
    ),
    
      # Output:
      mainPanel(tabsetPanel(type = "tabs",
        tabPanel(title = "Overview",
                 h3("Overview"),
                 br(),
                 HTML("Here goes the content")),
        tabPanel(title = "Portability Graph",
                 h3("Portability graph"),
                 br(),
                 plotOutput(outputId = "scatterplot"),
                 textOutput(outputId = "description")),
        tabPanel(title = "Raw table",
                 h3("Raw Table"),
                 br(),
                 DT::dataTableOutput(outputId = "rawtable"), #tableOutput(outputId = "rawtable"),
                 downloadButton(outputId = "download_data", label = "Download data"))
      )
    )
  )
)

server <- function(input, output) {
  Upd.Porta.1 <- reactive({filter(Porta.1, Operador.Grupo == input$Operator & ano.mes >= input$MinYear)}) 
  Upd.Porta.2 <- reactive({filter(Porta.2, Operador.Grupo == input$Operator & ano.mes >= input$MinYear)}) 
  
  filetype = "csv"
  output$download_data <- downloadHandler(
    filename = function() {
      paste("test.csv")
    },
    content = function(file) {
      if(filetype == "csv"){
        write_csv(Upd.Porta.1(), path = file)
      }
    }
  )
  
  output$description <- renderText({
    paste0(nrow(Upd.Porta.1()))})
  
  # Create scatterplot object the plotOutput function is expecting
  output$scatterplot <- renderPlot({
    ggplot(data = Upd.Porta.2(),
           aes(y = Importaciones, x = Exportaciones)) +
      geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
      geom_point(size = 2, aes(colour = Donante.Grupo)) +
      geom_line(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
      geom_text(aes(label = Upd.Porta.2()[,"ano.mes"], y = Importaciones + 5000), size = 3, color = "grey29") +
      scale_color_manual(values = sapply(levels(as.factor(Upd.Porta.2()[, "Donante.Grupo"])), function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA")))
  })
  
  # Create rawtable object the plotOutput function is expecting
  output$rawtable <- DT::renderDataTable({DT::datatable(Upd.Porta.1(), options = list(pageLength = 10))})#renderTable({Porta.1})
}

  ## 4.3 Running the app

shinyApp(ui = ui, server = server)
runApp()
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")