geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_line(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(label = Upd.Pr_2()[,"ano.mes"], y = Importaciones + 5000), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Upd.Pr_2()[, "Donante.Grupo"])), function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA"))) +
coord_cartesian(xlim = c(0, max(Upd.Pr_2()[,c("Importaciones", "Exportaciones")]) * 1.04), ylim = c(0, max(Upd.Pr_2()[,c("Importaciones", "Exportaciones")]) * 1.04))
})
# #Operator images
#
# output$myImage <- renderImage({
#   # A temp file to save the output.
#   # This file will be removed later by renderImage
#   outfile <- tempfile(fileext = '.png')
#
#   # Generate the PNG
#   png(outfile, width = 400, height = 300)
#   img()
#   hist(rnorm(10), main = "Generated in renderImage()")
#   dev.off()
#
#   # Return a list containing the filename
#   list(src = outfile,
#        contentType = 'image/png',
#        width = 400,
#        height = 300,
#        alt = "This is alternate text")
# }, deleteFile = TRUE)
#
# output$Op1 <- renderImage({ f = tempfile(fileext = '.png')
# png(f, width = 200, height = 100)
# list(src = f)
# },deleteFile = TRUE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
# output$Op2 <- renderImage({list(src = "C:\\Users\\a1380\\Desktop\\Portability Project\\VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = TRUE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
# output$Op3 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = FALSE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
# output$Op4 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = FALSE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
# output$Op5 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = FALSE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
#
# Create rawtable object the plotOutput function is expecting
output$rawtable <- DT::renderDataTable({DT::datatable(Upd.Pr_1(), options = list(pageLength = 10))}) #renderTable({Pr_1})
}
## 4.3 Running the app
shinyApp(ui = ui, server = server)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help("tempfile")
help(img)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help("imageOutput")
help("imageOutput")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
## 1.Preliminar steps
# 1.1 Library Load
# 1.2 Data Load
## 2.Server Configuration
# 2.1 Shinyapps.io login
# 2.2 Shinyapp.io deployment
## 3.Data Manipulation
# 3.1 Creating Pr_2 table
# 3.2 Removing self-portabilities
## 4.Shiny Application
# 4.1 Adjustements
# 4.2 ui and server
# 4.3 Running the app
#### 1.Preliminar steps
# 1.1 Library Load
library(ggplot2)
library(data.table)
library(dplyr)
library(reshape)
library(readr)
library(lattice)
library(shiny)
library(shinythemes)
library(rsconnect)
library(DT)
# 1.2 Data Load
setwd("C:\\Users\\a1380\\Desktop\\Portability Project")
Pr_1 = fread("Portability_sim_data.csv")
#### 2.Server Configuration ####
# 2.1 Shinyapps.io login
secret = readLines(con = "C:/Users/a1380/Documents/CredencialShiny.txt")
rsconnect::setAccountInfo(name='nspproject',
token='84DA9E67B476250E326ED7FAB04F4E9E',
secret=secret)
# 2.2 Shinyapp.io deployment
rsconnect::deployApp("C:/Users/a1380/Desktop/Portability Project")
#### 3.Data Manipulation ####
## 3.1 Creating Pr_2 table, to be used in the visualizations.
Pr_2 = Pr_1
Pr_2$Exportaciones = apply(Pr_1, 1, FUN = function(x) {
TargetRow = intersect(which(Pr_1$Donante.Grupo == x["Operador.Grupo"]), intersect(which(Pr_1$Operador.Grupo == x["Donante.Grupo"]), which(Pr_1$ano.mes == x["ano.mes"])))
Pr_1$Importaciones[TargetRow]
})
## 3.2 Removing self-portabilities
Pr_2 = Pr_2[-which(Pr_2$Donante.Grupo == Pr_2$Operador.Grupo),]
#### 4.Shiny Application ####
## 4.1 Adjustments
options(scipen=999)
zones = data.frame(c(1,1,1,1,2,2,2,2), c(0, 0, 300000, 0, 300000, 300000, 0, 0), c(0, 300000, 300000, 0, 0, 300000, 0, 0), c("#FD625E", "#FD625E", "#FD625E", "#FD625E", "#66CC00", "#66CC00", "#66CC00", "#66CC00"))
colnames(zones) = c("group", "Importaciones", "Exportaciones", "color")
## 4.2 ui and server
ui <- fluidPage(theme = shinytheme("cerulean"),
# App title
column(width = 8,titlePanel("CdM Portability Spain", windowTitle = "Portabilidad"), offset = 3),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel( width = 3,
h3("Selection"),      # Third level header: Selection
# Select Operator
selectInput(inputId = "Operator",
label = "Operator:",
choices = c("Vodafone", "Movistar", "Orange", "Masmovil", "Resto"),
selected = "Vodafone"
),
# Select Years
selectInput(inputId = "MinYear",
label = "MinimumYear:",
choices = levels(as.factor(Pr_2$ano.mes)),
selected = "1712"
),
# Built with Shiny by RStudio
br(),
h5("Built with",
img(src = "https://www.rstudio.com/wp-content/uploads/2014/04/shiny.png", height = "30px"),
"by"),
h5("Ignacio SÃ¡nchez Puente"),
img(src = "image.png", height = "50px")
),
# Output:
mainPanel(tabsetPanel(type = "tabs",
tabPanel(title = "Overview",
h3("Overview"),
br(),
HTML("Here goes the content")),
tabPanel(title = "Portability Graph",
h3("Portability graph"),
br(),
h5(imageOutput("Op1", width = "10%", height = "10%", inline = TRUE),
imageOutput("Op2", width = "10%", height = "10%", inline = TRUE),
imageOutput("Op3", width = "10%", height = "10%", inline = TRUE),
imageOutput("Op4", width = "10%", height = "10%", inline = TRUE),
imageOutput("Op5", width = "10%", height = "10%", inline = TRUE)),
plotOutput(outputId = "scatterplot"),
textOutput(outputId = "description")),
tabPanel(title = "Raw table",
h3("Raw Table"),
br(),
DT::dataTableOutput(outputId = "rawtable"), #tableOutput(outputId = "rawtable"),
downloadButton(outputId = "download_data", label = "Download data"))
)
)
)
)
server <- function(input, output) {
Upd.Pr_1 <- reactive({filter(Pr_1, Operador.Grupo == input$Operator & ano.mes >= input$MinYear)})
Upd.Pr_2 <- reactive({filter(Pr_2, Operador.Grupo == input$Operator & ano.mes >= input$MinYear)})
filetype = "csv"
output$download_data <- downloadHandler(
filename = function() {
paste("test.csv")
},
content = function(file) {
if(filetype == "csv"){
write_csv(Upd.Pr_1(), path = file)
}
}
)
output$description <- renderText({
paste0(nrow(Upd.Pr_1()))})
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = Upd.Pr_2(),
aes(y = Importaciones, x = Exportaciones)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_line(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(label = Upd.Pr_2()[,"ano.mes"], y = Importaciones + 5000), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Upd.Pr_2()[, "Donante.Grupo"])), function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA"))) +
coord_cartesian(xlim = c(0, max(Upd.Pr_2()[,c("Importaciones", "Exportaciones")]) * 1.04), ylim = c(0, max(Upd.Pr_2()[,c("Importaciones", "Exportaciones")]) * 1.04))
})
# Create waterfall object the plotOutput function is expecting
ouput$waterfall <- renderPlot({ggplot(Pr_1[Grupo.Operador == input$Operator], aes(Importaciones - Exportaciones)) +
geom_rect(aes(x = ano.mes))
})
#Operator images
output$Op1 <- renderImage({list(src = if(input$Operator == "Vodafone") {"www/VODAFONE.png"} else {"www/VODAFONE_LIGHT.png"}, contentType = 'image/png', width = 100)}, deleteFile = FALSE)
output$Op2 <- renderImage({list(src = if(input$Operator == "Movistar") {"www/MOVISTAR.png"} else {"www/MOVISTAR_LIGHT.png"}, contentType = 'image/png', width = 100)}, deleteFile = FALSE)
output$Op3 <- renderImage({list(src = if(input$Operator == "Orange") {"www/ORANGE.png"} else {"www/ORANGE_LIGHT.png"}, contentType = 'image/png', width = 100)}, deleteFile = FALSE)
output$Op4 <- renderImage({list(src = if(input$Operator == "Masmovil") {"www/MASMOVIL.png"} else {"www/MASMOVIL_LIGHT.png"}, contentType = 'image/png', width = 100)}, deleteFile = FALSE)
output$Op5 <- renderImage({list(src = if(input$Operator == "Resto") {"www/RESTO.png"} else {"www/RESTO_LIGHT.png"}, contentType = 'image/png', width = 100)}, deleteFile = FALSE)
#Create rawtable object the plotOutput function is expecting
output$rawtable <- DT::renderDataTable({DT::datatable(Upd.Pr_1(), options = list(pageLength = 10))}) #renderTable({Pr_1})
}
head(Pr_1)
ggplot(Pr_1[Grupo.Operador == input$Operator], aes(Importaciones - Exportaciones)) +
geom_rect(aes(x = ano.mes))
## GrÃ¡fico cascada
ggplot(Pr_1[Operador.Grupo == input$Operator], aes(Importaciones - Exportaciones)) +
geom_rect(aes(x = ano.mes))
## GrÃ¡fico cascada
ggplot(Pr_1[Operador.Grupo == "Vodafone"], aes(Importaciones - Exportaciones)) +
geom_rect(aes(x = ano.mes))
row.names(Pr_1)
row.names(Pr_1[Operador.Grupo == "Vodafone"])
Pr_X = Pr_1[Operador.Grupo == "Vodafone"]
Pr_X$end <- cumsum(Pr_X$Importaciones - Pr_X$Exportaciones)
head(Pr_x)
head(Pr_X)
Pr_X = Pr_2[Operador.Grupo == "Vodafone"]
Pr_X$end <- cumsum(Pr_X$Importaciones - Pr_X$Exportaciones)
head(Pr_X)
Porta.5_F = function(x) {x %>%
.[, .( resta = sum(Importaciones)-sum(Referencia), Import = sum(Importaciones), Refer = sum(Referencia)), by = list(ano.mes, Operador.Grupo)]}
## GrÃ¡fico cascada
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X$end <- cumsum(Pr_X$Import - Pr_X$Export)
head(Pr_X)
Porta.5_F = function(x) {x %>%
.[, .( resta = sum(Importaciones)-sum(Referencia), Import = sum(Importaciones), Refer = sum(Referencia), Export = sum(Exportaciones)), by = list(ano.mes, Operador.Grupo)]}
Pr_x = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X$end <- cumsum(Pr_X$Import - Pr_X$Export)
head(Pr_X)
Porta.5_F = function(x) {x %>%
.[, .( resta = sum(Importaciones)-sum(Referencia), Import = sum(Importaciones), Refer = sum(Referencia), Export = sum(Exportaciones)), by = list(ano.mes, Operador.Grupo)]}
Pr_x = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
head(Pr_2)
Pr_x = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
head(Pr_X)
Porta.5_F = function(x) {x %>%
.[, .( resta = sum(Importaciones)-sum(Referencia), Import = sum(Importaciones), Refer = sum(Referencia), Export = sum(Exportaciones)), by = list(ano.mes, Operador.Grupo)]}
Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_x = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X$end <- cumsum(Pr_X$Import - Pr_X$Export)
cumsum(Pr_X$Import - Pr_X$Export)
cumsum(Pr_X$Import)
cumsum(Pr_X$Export)
head(Pr_X)
Pr_x = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X
View(Pr_2)
Porta.5_F = function(x) {x %>%
.[, .( resta = sum(Importaciones)-sum(Referencia), Import = sum(Importaciones), Refer = sum(Referencia), Export = sum(Exportaciones)), by = list(ano.mes, Operador.Grupo)]}
Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_x = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
head(Pr_X)
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
cumsum(Pr_X$Import - Pr_X$Export
)
Pr_X[,"end":=cumsum(Pr_X$Import - Pr_X$Export)]
head(Pr_X)
Pr_X[,"start":=c(0, Pr.X[2:.N,end])]
Pr_X[,"start":=c(0, Pr_X[2:.N,end])]
head(Pr_X)
Pr_X[,"start":=c(0, Pr_X[1:(.N-1),end])]
head(Pr_X)
ggplot(Pr_1[Operador.Grupo == "Vodafone"], aes(Importaciones - Exportaciones)) +
geom_rect(aes(x = ano.mes, xmin = as.numeric(row.names(Pr_1[Operador.Grupo == "Vodafone"])) - 0.45, xmax = as.numeric(row.names(Pr_1[Operador.Grupo == "Vodafone"])) + 0.45, ymin = end, ymax = start))
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":=cumsum(Pr_X$Import - Pr_X$Export)][,"start":=c(0, Pr_X[1:(.N-1),end])][,"id":=1:.N]
head(Pr_X)
ggplot(Pr_1[Operador.Grupo == "Vodafone"], aes(Importaciones - Exportaciones)) +
geom_rect(aes(x = ano.mes, xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
ggplot(Pr_X[Operador.Grupo == "Vodafone"], aes(Importaciones - Exportaciones)) +
geom_rect(aes(x = ano.mes, xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
ggplot(Pr_X[Operador.Grupo == "Vodafone"], aes(ano.mes)) +
geom_rect(aes(x = ano.mes, xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
ggplot(Pr_X, aes(ano.mes)) +
geom_rect(aes(x = ano.mes, xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
ggplot(Pr_X, aes(ano.mes)) +
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
Pr_X
ggplot(Pr_X, aes(id)) +
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
## GrÃ¡fico cascada
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":=cumsum(Pr_X$Import - Pr_X$Export)][,"start":=c(0, Pr_X[1:(.N-2),end],0)][,"id":=1:.N]
Pr_X[,"start":=c(0, Pr_X[1:(.N-1),end])]
ggplot(Pr_X, aes(id)) +
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":=cumsum(Pr_X$Import - Pr_X$Export)][,"start":=c(0, Pr_X[1:(.N-1),end],0)][,"id":=1:.N]
Pr_X[,"start":=c(0, Pr_X[1:(.N-1),end])]
ggplot(Pr_X, aes(id)) +
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
## GrÃ¡fico cascada
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":=cumsum(Pr_X$Import - Pr_X$Export)][,"start":=c(0, Pr_X[1:(.N-2),end],0)][,"id":=1:.N]
Pr_X[,"start":=c(0, Pr_X[1:(.N-1),end])]
ggplot(Pr_X, aes(id)) +
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
View(Pr_X)
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":=cumsum(Pr_X$Import - Pr_X$Export)][,"start":=c(0, Pr_X[1:(.N-2),end],0)][,"id":=1:.N]
Pr_X[,"start":=c(0, Pr_X[1:(.N-1),end])]
ggplot(Pr_X, aes(id)) +
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
View(Pr_X)
Pr_X[1:(.N-2),end]
Pr_X[1:(.N-1),end]
c(0, Pr_X[1:(.N-2),end],0)
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":=cumsum(Pr_X$Import - Pr_X$Export)][,"start":=c(0, Pr_X[1:(.N-2),end],0)][,"id":=1:.N]
Pr_X[,"start":=c(0, Pr_X[1:(.N-1),end])]
View(Pr_X)
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":=cumsum(Pr_X$Import - Pr_X$Export)][,"start":=c(0, Pr_X[1:(.N-5),end],0)][,"id":=1:.N]
Pr_X[,"start":=c(0, Pr_X[1:(.N-1),end])]
View(Pr_X)
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":=cumsum(Pr_X$Import - Pr_X$Export)]
View(Pr_X)
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":=cumsum(Pr_X$Import - Pr_X$Export)][,"start":=c(0, Pr_X[1:(.N-2),end],0)][,"id":=1:.N]
ggplot(Pr_X, aes(id)) +
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
Pr_X[, "id" := 1:.N][,"sign" := Import - Export >= 0]
ggplot(Pr_X, aes(id, fill = sign)) +
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N][,"sign" := Import - Export >= 0]
Pr_X[c(1, .N),"sign"] = 2
ggplot(Pr_X, aes(id, fill = sign)) +
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
Pr_X[c(1, .N),sign] = 2
Pr_X[c(1, .N),sign:= 2]
ggplot(Pr_X, aes(id, fill = sign)) +
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
Pr_X[, "id" := 1:.N][,"sign" := if(id = 1 | id = .N) {1} else if(Import - Export >= 0) {0} else {2}]
ggplot(Pr_X, aes(id, fill = sign)) +
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N][,"sign" := if(id == 1 | id == .N) {1} else if(Import - Export >= 0) {0} else {2}]
ggplot(Pr_X, aes(id, fill = sign)) +
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N]
Pr_X[,"sign" := if(id == 1 | id == .N) {1} else if(Import - Export >= 0) {0} else {2}]
Pr_X[, "id" := 1:.N][,"sign" := {if(id == 1 | id == .N) 1 else if(Import - Export >= 0) 0 else 2}]
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N][,"sign" := {if(id == 1 | id == .N) {1} else if(Import - Export >= 0) {0} else {2}}]
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N][,"sign" := {if(id == 1|id == .N) {1} else if(Import - Export >= 0) {0} else {2}}]
ggplot(Pr_X, aes(id, fill = sign))+
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
## GrÃ¡fico cascada
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N][,"sign" := {if(id == 1)|(id == .N) {1} else if(Import - Export >= 0) {0} else {2}}]
ggplot(Pr_X, aes(id, fill = sign))+
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N][,"sign" := {if("id" == 1 | "id" == .N) {1} else if(Import - Export >= 0) {0} else {2}}]
ggplot(Pr_X, aes(id, fill = sign))+
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N][,"sign" := {if("id" == 1 | "id" == .N) {1} else if("Import" - "Export" >= 0) {0} else {2}}]
ggplot(Pr_X, aes(id, fill = sign))+
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
help(ifelse)
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N][,"sign" := {ifelse(id == 1 | id == .N) {1} else if(Import - Export >= 0) {0} else {2}}]
ggplot(Pr_X, aes(id, fill = sign))+
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
x <- c(6:-4)
sqrt(x)  #- gives warning
sqrt(ifelse(x >= 0, x, NA))  # no warning
yes <- 1:3
no <- pi^(0:3)
typeof(ifelse(NA,    yes, no)) # logical
no
## GrÃ¡fico cascada
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N][,"sign" := {ifelse(id == 1, 1, if(id == .N) {1} else if(Import - Export >= 0) {0} else {2})}]
ggplot(Pr_X, aes(id, fill = sign))+
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N][,"sign" := {ifelse(id == 1, 1, if(id == .N) {1} else if(Import - Export >= 0) {b} else {c})}]
ggplot(Pr_X, aes(id, fill = sign))+
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
## GrÃ¡fico cascada
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N][,"sign" := {ifelse(id == 1, a, if(id == .N) {a} else if(Import - Export >= 0) {b} else {c})}]
ggplot(Pr_X, aes(id, fill = sign))+
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
## GrÃ¡fico cascada
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N][,"sign" := {ifelse(id == 1, "a", if(id == .N) {"a"} else if(Import - Export >= 0) {"b"} else {"c"})}]
ggplot(Pr_X, aes(id, fill = sign))+
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N][,"sign" := if(Import - Export >= 0) {"b"} else {"c"}]
Pr_X[, "id" := 1:.N][,"sign" := {ifelse(id == 1, "a", if(id == .N) {"a"} else if(Import - Export >= 0) {"b"} else {"c"})}, by = id]
ggplot(Pr_X, aes(id, fill = sign))+
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
View(Pr_X)
Pr_X[, "id" := 1:.N][,"sign" := {ifelse(id == 1, "a", if(id == .SD(.N)) {"a"} else if(Import - Export >= 0) {"b"} else {"c"})}, by = id]
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N][,"sign" := {if(Import - Export >= 0) {"b"} else {"c"}}, by = id][c(1, .N),"sign" := "a"]
ggplot(Pr_X, aes(id, fill = sign))+
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
Pr_X[, "id" := 1:.N][,"sign" := {if(Import - Export >= 0) {"b"} else {"a"}}, by = id][c(1, .N),"sign" := "c"]
ggplot(Pr_X, aes(id, fill = sign))+
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)] %>%
[,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)] %>%
Pr_X[,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)] %>%
.[,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
head(Pr_2)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
head(Pr_2)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
head(Pr_2)
help("renderDataTable")
shinyApp(
ui = fluidPage(DTOutput('tbl')),
server = function(input, output) {
output$tbl = renderDT(
iris, options = list(lengthChange = FALSE)
)
}
)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help(setDT())
help(setDT
)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
