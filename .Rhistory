}
}
)
output$description <- renderText({
paste0(nrow(Upd.Porta.1()))})
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = Upd.Porta.2(),
aes(y = Importaciones, x = Exportaciones)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_line(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(label = Upd.Porta.2()[,"ano.mes"], y = Importaciones + 5000), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Upd.Porta.2()[, "Donante.Grupo"])), function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA")))
})
# Create rawtable object the plotOutput function is expecting
output$rawtable <- DT::renderDataTable({DT::datatable(Upd.Porta.1(), options = list(pageLength = 10))})#renderTable({Porta.1})
}
## 4.3 Running the app
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme("cerulean"),
# App title
column(width = 8,titlePanel("CdM Portability Spain", windowTitle = "Portabilidad"), offset = 3),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel( width = 3,
h3("Selection"),      # Third level header: Selection
# Select Operator
selectInput(inputId = "Operator",
label = "Operator:",
choices = c("Vodafone", "Movistar", "Orange", "Masmovil", "Resto"),
selected = "Vodafone"
),
# Select Years
selectInput(inputId = "MinYear",
label = "MinimumYear:",
choices = levels(as.factor(Porta.2$ano.mes)),
selected = "1604"
),
# Built with Shiny by RStudio
br(),
h5("Built with",
img(src = "https://www.rstudio.com/wp-content/uploads/2014/04/shiny.png", height = "30px"),
"by"),
h5("Ignacio Sánchez Puente"),
img(src = "image.png", height = "50px")
),
# Output:
mainPanel(tabsetPanel(type = "tabs",
tabPanel(title = "Overview",
h3("Overview"),
br(),
HTML("Here goes the content")),
tabPanel(title = "Portability Graph",
h3("Portability graph"),
br(),
plotOutput(outputId = "scatterplot"),
textOutput(outputId = "description")),
tabPanel(title = "Raw table",
h3("Raw Table"),
br(),
DT::dataTableOutput(outputId = "rawtable"), #tableOutput(outputId = "rawtable"),
downloadButton(outputId = "download_data", label = "Download data"))
)
)
)
)
server <- function(input, output) {
Upd.Porta.1 <- reactive({req(input$Operator) filter(Porta.1, Operador.Grupo %in% input$Operator)})
Upd.Porta.2 <- reactive({req(input$Operator) filter(Porta.2, Operador.Grupo %in% input$Operator)})
filetype = "csv"
output$download_data <- downloadHandler(
filename = function() {
paste("test.csv")
},
content = function(file) {
if(filetype == "csv"){
write_csv(Upd.Porta.1(), path = file)
}
}
)
output$description <- renderText({
paste0(nrow(Upd.Porta.1()))})
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = Upd.Porta.2(),
aes(y = Importaciones, x = Exportaciones)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_line(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(label = Upd.Porta.2()[,"ano.mes"], y = Importaciones + 5000), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Upd.Porta.2()[, "Donante.Grupo"])), function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA")))
})
# Create rawtable object the plotOutput function is expecting
output$rawtable <- DT::renderDataTable({DT::datatable(Upd.Porta.1(), options = list(pageLength = 10))})#renderTable({Porta.1})
}
## 4.3 Running the app
shinyApp(ui = ui, server = server)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
ui <- fluidPage(theme = shinytheme("cerulean"),
# App title
column(width = 8,titlePanel("CdM Portability Spain", windowTitle = "Portabilidad"), offset = 3),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel( width = 3,
h3("Selection"),      # Third level header: Selection
# Select Operator
selectInput(inputId = "Operator",
label = "Operator:",
choices = c("Vodafone", "Movistar", "Orange", "Masmovil", "Resto"),
selected = "Vodafone"
),
# Select Years
selectInput(inputId = "MinYear",
label = "MinimumYear:",
choices = levels(as.factor(Porta.2$ano.mes)),
selected = "1604"
),
# Built with Shiny by RStudio
br(),
h5("Built with",
img(src = "https://www.rstudio.com/wp-content/uploads/2014/04/shiny.png", height = "30px"),
"by"),
h5("Ignacio Sánchez Puente"),
img(src = "image.png", height = "50px")
),
# Output:
mainPanel(tabsetPanel(type = "tabs",
tabPanel(title = "Overview",
h3("Overview"),
br(),
HTML("Here goes the content")),
tabPanel(title = "Portability Graph",
h3("Portability graph"),
br(),
plotOutput(outputId = "scatterplot"),
textOutput(outputId = "description")),
tabPanel(title = "Raw table",
h3("Raw Table"),
br(),
DT::dataTableOutput(outputId = "rawtable"), #tableOutput(outputId = "rawtable"),
downloadButton(outputId = "download_data", label = "Download data"))
)
)
)
)
server <- function(input, output) {
Upd.Porta.1 <- reactive({req(input$Operator) filter(Porta.1, Operador.Grupo = input$Operator)})
Upd.Porta.2 <- reactive({req(input$Operator) filter(Porta.2, Operador.Grupo = input$Operator)})
filetype = "csv"
output$download_data <- downloadHandler(
filename = function() {
paste("test.csv")
},
content = function(file) {
if(filetype == "csv"){
write_csv(Upd.Porta.1(), path = file)
}
}
)
output$description <- renderText({
paste0(nrow(Upd.Porta.1()))})
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = Upd.Porta.2(),
aes(y = Importaciones, x = Exportaciones)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_line(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(label = Upd.Porta.2()[,"ano.mes"], y = Importaciones + 5000), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Upd.Porta.2()[, "Donante.Grupo"])), function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA")))
})
# Create rawtable object the plotOutput function is expecting
output$rawtable <- DT::renderDataTable({DT::datatable(Upd.Porta.1(), options = list(pageLength = 10))})#renderTable({Porta.1})
}
## 4.3 Running the app
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme("cerulean"),
# App title
column(width = 8,titlePanel("CdM Portability Spain", windowTitle = "Portabilidad"), offset = 3),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel( width = 3,
h3("Selection"),      # Third level header: Selection
# Select Operator
selectInput(inputId = "Operator",
label = "Operator:",
choices = c("Vodafone", "Movistar", "Orange", "Masmovil", "Resto"),
selected = "Vodafone"
),
# Select Years
selectInput(inputId = "MinYear",
label = "MinimumYear:",
choices = levels(as.factor(Porta.2$ano.mes)),
selected = "1604"
),
# Built with Shiny by RStudio
br(),
h5("Built with",
img(src = "https://www.rstudio.com/wp-content/uploads/2014/04/shiny.png", height = "30px"),
"by"),
h5("Ignacio Sánchez Puente"),
img(src = "image.png", height = "50px")
),
# Output:
mainPanel(tabsetPanel(type = "tabs",
tabPanel(title = "Overview",
h3("Overview"),
br(),
HTML("Here goes the content")),
tabPanel(title = "Portability Graph",
h3("Portability graph"),
br(),
plotOutput(outputId = "scatterplot"),
textOutput(outputId = "description")),
tabPanel(title = "Raw table",
h3("Raw Table"),
br(),
DT::dataTableOutput(outputId = "rawtable"), #tableOutput(outputId = "rawtable"),
downloadButton(outputId = "download_data", label = "Download data"))
)
)
)
)
server <- function(input, output) {
Upd.Porta.1 <- reactive({filter(Porta.1, Operador.Grupo = input$Operator)})
Upd.Porta.2 <- reactive({filter(Porta.2, Operador.Grupo = input$Operator)})
filetype = "csv"
output$download_data <- downloadHandler(
filename = function() {
paste("test.csv")
},
content = function(file) {
if(filetype == "csv"){
write_csv(Upd.Porta.1(), path = file)
}
}
)
output$description <- renderText({
paste0(nrow(Upd.Porta.1()))})
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = Upd.Porta.2(),
aes(y = Importaciones, x = Exportaciones)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_line(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(label = Upd.Porta.2()[,"ano.mes"], y = Importaciones + 5000), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Upd.Porta.2()[, "Donante.Grupo"])), function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA")))
})
# Create rawtable object the plotOutput function is expecting
output$rawtable <- DT::renderDataTable({DT::datatable(Upd.Porta.1(), options = list(pageLength = 10))})#renderTable({Porta.1})
}
## 4.3 Running the app
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme("cerulean"),
# App title
column(width = 8,titlePanel("CdM Portability Spain", windowTitle = "Portabilidad"), offset = 3),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel( width = 3,
h3("Selection"),      # Third level header: Selection
# Select Operator
selectInput(inputId = "Operator",
label = "Operator:",
choices = c("Vodafone", "Movistar", "Orange", "Masmovil", "Resto"),
selected = "Vodafone"
),
# Select Years
selectInput(inputId = "MinYear",
label = "MinimumYear:",
choices = levels(as.factor(Porta.2$ano.mes)),
selected = "1604"
),
# Built with Shiny by RStudio
br(),
h5("Built with",
img(src = "https://www.rstudio.com/wp-content/uploads/2014/04/shiny.png", height = "30px"),
"by"),
h5("Ignacio Sánchez Puente"),
img(src = "image.png", height = "50px")
),
# Output:
mainPanel(tabsetPanel(type = "tabs",
tabPanel(title = "Overview",
h3("Overview"),
br(),
HTML("Here goes the content")),
tabPanel(title = "Portability Graph",
h3("Portability graph"),
br(),
plotOutput(outputId = "scatterplot"),
textOutput(outputId = "description")),
tabPanel(title = "Raw table",
h3("Raw Table"),
br(),
DT::dataTableOutput(outputId = "rawtable"), #tableOutput(outputId = "rawtable"),
downloadButton(outputId = "download_data", label = "Download data"))
)
)
)
)
server <- function(input, output) {
Upd.Porta.1 <- reactive({filter(Porta.1, Operador.Grupo == input$Operator)})
Upd.Porta.2 <- reactive({filter(Porta.2, Operador.Grupo == input$Operator)})
filetype = "csv"
output$download_data <- downloadHandler(
filename = function() {
paste("test.csv")
},
content = function(file) {
if(filetype == "csv"){
write_csv(Upd.Porta.1(), path = file)
}
}
)
output$description <- renderText({
paste0(nrow(Upd.Porta.1()))})
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = Upd.Porta.2(),
aes(y = Importaciones, x = Exportaciones)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_line(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(label = Upd.Porta.2()[,"ano.mes"], y = Importaciones + 5000), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Upd.Porta.2()[, "Donante.Grupo"])), function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA")))
})
# Create rawtable object the plotOutput function is expecting
output$rawtable <- DT::renderDataTable({DT::datatable(Upd.Porta.1(), options = list(pageLength = 10))})#renderTable({Porta.1})
}
## 4.3 Running the app
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme("cerulean"),
# App title
column(width = 8,titlePanel("CdM Portability Spain", windowTitle = "Portabilidad"), offset = 3),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel( width = 3,
h3("Selection"),      # Third level header: Selection
# Select Operator
selectInput(inputId = "Operator",
label = "Operator:",
choices = c("Vodafone", "Movistar", "Orange", "Masmovil", "Resto"),
selected = "Vodafone"
),
# Select Years
selectInput(inputId = "MinYear",
label = "MinimumYear:",
choices = levels(as.factor(Porta.2$ano.mes)),
selected = "1604"
),
# Built with Shiny by RStudio
br(),
h5("Built with",
img(src = "https://www.rstudio.com/wp-content/uploads/2014/04/shiny.png", height = "30px"),
"by"),
h5("Ignacio Sánchez Puente"),
img(src = "image.png", height = "50px")
),
# Output:
mainPanel(tabsetPanel(type = "tabs",
tabPanel(title = "Overview",
h3("Overview"),
br(),
HTML("Here goes the content")),
tabPanel(title = "Portability Graph",
h3("Portability graph"),
br(),
plotOutput(outputId = "scatterplot"),
textOutput(outputId = "description")),
tabPanel(title = "Raw table",
h3("Raw Table"),
br(),
DT::dataTableOutput(outputId = "rawtable"), #tableOutput(outputId = "rawtable"),
downloadButton(outputId = "download_data", label = "Download data"))
)
)
)
)
server <- function(input, output) {
Upd.Porta.1 <- reactive({filter(Porta.1, Operador.Grupo == input$Operator & ano.mes >= input$MinYear)})
Upd.Porta.2 <- reactive({filter(Porta.2, Operador.Grupo == input$Operator & ano.mes >= input$MinYear)})
filetype = "csv"
output$download_data <- downloadHandler(
filename = function() {
paste("test.csv")
},
content = function(file) {
if(filetype == "csv"){
write_csv(Upd.Porta.1(), path = file)
}
}
)
output$description <- renderText({
paste0(nrow(Upd.Porta.1()))})
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = Upd.Porta.2(),
aes(y = Importaciones, x = Exportaciones)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_line(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(label = Upd.Porta.2()[,"ano.mes"], y = Importaciones + 5000), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Upd.Porta.2()[, "Donante.Grupo"])), function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA")))
})
# Create rawtable object the plotOutput function is expecting
output$rawtable <- DT::renderDataTable({DT::datatable(Upd.Porta.1(), options = list(pageLength = 10))})#renderTable({Porta.1})
}
## 4.3 Running the app
shinyApp(ui = ui, server = server)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
Porta.3 = Porta.2
Porta.3 = Porta.1
Porta.3[1,]
Porta.3[1,4]
Porta.3[1,4] + rnd(0,1) *  + rnd(0,1) * x[4]
Porta.3[1,4] + runif(0,1) *  + runif(0,1) * x[4]
Porta.3[1,4] + runif(0,1) *  + runif(0,1) * Porta.3[4]
Porta.3[1,4] + runif(0,1) *  + runif(0,1) * Porta.3[1,4]
runif(0,1)
runif(1,0)
Porta.3[1,4] + runif(1,0) *  + runif(1,0) * Porta.3[1,4]
Porta.3[1,4]
Porta.3[1,4] + runif(1,0) *  + runif(1,0) * Porta.3[1,4]
Porta.3[1,4] + runif(1,0) *  + runif(1,0) * Porta.3[1,4]
Porta.3[1,4] + runif(1,0) *  + runif(2,0) * Porta.3[1,4]
help("runif")
Porta.3[1,4] + runif(1,0,2) *  + runif(1,0,2) * Porta.3[1,4]
Porta.3[1,4] + runif(1,0,2) * Porta.3[1,4]
Porta.3[1,4] + runif(1,0,2) * Porta.3[1,4]
Porta.3[1,4] + runif(1,0,2) * Porta.3[1,4]
Porta.3[1,4] + runif(1,0,2) * Porta.3[1,4]
Porta.3[1,4] + runif(1,0,2) * Porta.3[1,4]
Porta.3 = Porta.1
Porta.4 = apply(Porta.3, 1, function(x) {
x[4] = x[4] + runif(1,0,2) * x[4]
x
})
Porta.4 = apply(Porta.3, 1, function(x) {
print(class(x[4)
x[4] = x[4] + runif(1,0,2) * x[4]
x
})
Porta.4 = apply(Porta.3, 1, function(x) {
print(class(x[4))
x[4] = x[4] + runif(1,0,2) * x[4]
x
})
Porta.4 = apply(Porta.3, 1, function(x) {
print(class(x[4]))
x[4] = x[4] + runif(1,0,2) * x[4]
x
})
class(Porta.3[1,4])
Porta.4 = apply(Porta.3, 1, function(x) {
print(x[4])
x[4] = x[4] + runif(1,0,2) * x[4]
x
})
Porta.4 = sapply(Porta.3$Importaciones, function(x) {
x = x + runif(1,0,2) * x
x
})
Porta.3 = Porta.1
Porta.4$Importaciones = sapply(Porta.3$Importaciones, function(x) {
x = x + runif(1,0,2) * x
x
})
View(Porta.4)
class(sapply(Porta.3$Importaciones, function(x) {
x = x + runif(1,0,2) * x
x
}))
sapply(Porta.3$Importaciones, function(x) {
x = x + runif(1,0,2) * x
x
})
nrow(Porta.4)
nrow(Porta.3)
Porta.3 = Porta.1
Porta.3$Importaciones = sapply(Porta.1$Importaciones, function(x) {
x = x + runif(1,0,2) * x
x
})
View(Porta.3)
Porta.4 = Porta.3[which(Porta.3$ano.mes = 1804),]
Porta.4 = Porta.3[which(Porta.3$ano.mes == 1804),]
Porta.4
Porta.4$Referencia = Porta.1[which(Porta.1$ano.mes == 1804),"importaciones"]
Porta.4
Porta.4$Referencia = Porta.1[which(Porta.1$ano.mes == 1804),"Importaciones"]
Porta.4
Porta.4 = as.datatable(Porta.3[which(Porta.3$ano.mes == 1804),])
Porta.4 = as.data.table(Porta.3[which(Porta.3$ano.mes == 1804),]))
Porta.4 = as.data.table(Porta.3[which(Porta.3$ano.mes == 1804),])
library(data.table)
Porta.4 = as.data.table(Porta.3[which(Porta.3$ano.mes == 1804),])
Porta.4$Referencia = Porta.1[which(Porta.1$ano.mes == 1804),"Importaciones"]
head(Porta.4)
Porta.4[, sum(Importaciones)-sum(Referencia), by = Donante.Grupo]
Porta.4[, .( resta = sum(Importaciones)-sum(Referencia), Importaciones, Referencia), by = Donante.Grupo]
while (Porta.4[, .( resta = sum(Importaciones), Importaciones, Referencia), by = Donante.Grupo]  )
Porta.4[, .( resta = sum(Importaciones), Importaciones, Referencia), by = Donante.Grupo]
Porta.4[, .( resta = sum(Importaciones), sum(Importaciones), sum(Referencia)), by = Donante.Grupo]
Porta.4[, .( resta = sum(Importaciones)-sum(Referencia), Import = sum(Importaciones), Refer = sum(Referencia)), by = Donante.Grupo]
