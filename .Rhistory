geom_text(aes(y = Importaciones + 2500), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Pr_2[, "Donante.Grupo"])),
function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA"))) +
coord_fixed(ratio = 1, xlim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04), ylim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04)) +
theme_minimal()
p <- ggplot(data = Pr_2[Operador.Grupo == "Vodafone"],
aes(y = Importaciones, x = Exportaciones, label = ano.mes)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_path(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(y = Importaciones + 2500), size = 3, color = "grey29")
p <- ggplot(data = Pr_2[Operador.Grupo == "Vodafone"],
aes(y = Importaciones, x = Exportaciones, label = ano.mes)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_path(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(y = Importaciones + 2500), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Pr_2[, "Donante.Grupo"]))
,
function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA")))
p <- ggplot(data = Pr_2[Operador.Grupo == "Vodafone"],
aes(y = Importaciones, x = Exportaciones, label = ano.mes)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_path(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(y = Importaciones + 2500), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Pr_2[, "Donante.Grupo"])),
function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA"))) +
coord_fixed(ratio = 1, xlim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04), ylim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04))รง
p <- ggplot(data = Pr_2[Operador.Grupo == "Vodafone"],
aes(y = Importaciones, x = Exportaciones, label = ano.mes)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_path(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(y = Importaciones + 2500), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Pr_2[, "Donante.Grupo"])),
function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA"))) +
coord_fixed(ratio = 1, xlim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04), ylim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04))
p <- ggplot(data = Pr_2[Operador.Grupo == "Vodafone"],
aes(y = Importaciones, x = Exportaciones, label = ano.mes)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_path(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(y = Importaciones + 2500), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Pr_2[, "Donante.Grupo"][1])),
function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA"))) +
coord_fixed(ratio = 1, xlim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04), ylim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04)) +
theme_minimal() +
theme(plot.margin=unit(c(0,0,0,0),"cm"))
p <- ggplot(data = Pr_2[Operador.Grupo == "Vodafone"],
aes(y = Importaciones, x = Exportaciones, label = ano.mes)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_path(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(y = Importaciones + 2500), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Pr_2[, "Donante.Grupo"][[1]])),
function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA"))) +
coord_fixed(ratio = 1, xlim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04), ylim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04)) +
theme_minimal() +
theme(plot.margin=unit(c(0,0,0,0),"cm"))
p
p <- ggplotly(p)
p
chart_link = api_create(p, filename="gganimations/basic")
chart_link
packageVersion('plotly')
p
p <- ggplot(data = Pr_2[Operador.Grupo == "Vodafone"],
aes(y = Importaciones, x = Exportaciones, label = ano.mes)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo, frame = ano.mes)) +
geom_path(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(y = Importaciones + 2500), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Pr_2[, "Donante.Grupo"][[1]])),
function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA"))) +
coord_fixed(ratio = 1, xlim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04), ylim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04)) +
theme_minimal() +
theme(plot.margin=unit(c(0,0,0,0),"cm"))
p <- ggplotly(p)
p
p <- ggplot(data = Pr_2[Operador.Grupo == "Vodafone"],
aes(y = Importaciones, x = Exportaciones, label = ano.mes)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo, frame = ano.mes)) +
geom_path(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
#  geom_text(aes(y = Importaciones + 2500), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Pr_2[, "Donante.Grupo"][[1]])),
function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA"))) +
coord_fixed(ratio = 1, xlim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04), ylim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04)) +
theme_minimal() +
theme(plot.margin=unit(c(0,0,0,0),"cm"))
p <- ggplotly(p)
p
p <- p %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
)
p
p <- p %>%
animation_slider(
currentvalue = list(prefix = "YEAR ", font = list(color="red"))
)
p
p
library(ggThemeAssist)
ggThemeAssist:::ggThemeAssistAddin()
ggThemeAssist:::ggThemeAssistAddin()
ggThemeAssist:::ggThemeAssistAddin()
p <- ggplot(data = Pr_2[Operador.Grupo == "Vodafone"],
aes(y = Importaciones, x = Exportaciones, label = ano.mes)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo, frame = ano.mes)) +
geom_path(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
#  geom_text(aes(y = Importaciones + 2500), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Pr_2[, "Donante.Grupo"][[1]])),
function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA"))) +
coord_fixed(ratio = 1, xlim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04), ylim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04)) +
theme_minimal() +
theme(plot.margin=unit(c(0,0,0,0),"cm"))
ggThemeAssist::ggThemeAssistAddin()
help(ggThemeAssist::ggThemeAssistAddin())
p <- ggplot(data = Pr_2[Operador.Grupo == "Vodafone"],
aes(y = Importaciones, x = Exportaciones, label = ano.mes)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo, frame = ano.mes)) +
geom_path(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
#  geom_text(aes(y = Importaciones + 2500), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Pr_2[, "Donante.Grupo"][[1]])),
function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA"))) +
coord_fixed(ratio = 1, xlim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04), ylim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04)) +
theme_minimal() +
theme(plot.margin=unit(c(0,0,0,0),"cm"))
ggThemeAssist::ggThemeAssistAddin()
p
ggThemeAssist::ggThemeAssistAddin()
ggThemeAssist::p()
ggThemeAssist::p
p <- ggplot(data = Pr_2[Operador.Grupo == "Vodafone"],
aes(y = Importaciones, x = Exportaciones, label = ano.mes))
p
ggThemeAssist::ggThemeAssistAddin()
ggThemeAssist:::ggThemeAssistAddin()
class(p)
ggThemeAssist:::ggThemeAssistAddin()
p <- ggplot(data = Pr_2[Operador.Grupo == "Vodafone"],
aes(y = Importaciones, x = Exportaciones, label = ano.mes)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo, frame = ano.mes)) +
geom_path(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
#  geom_text(aes(y = Importaciones + 2500), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Pr_2[, "Donante.Grupo"][[1]])),
function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA"))) +
coord_fixed(ratio = 1, xlim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04), ylim = c(0, max(Pr_2[Operador.Grupo == "Vodafone"][,c("Importaciones", "Exportaciones")]) * 1.04)) +
theme_minimal() +
theme(plot.margin=unit(c(0,0,0,0),"cm"))
ggThemeAssist:::ggThemeAssistAddin()
p + theme(plot.subtitle = element_text(family  =  'serif'), plot.caption = element_text(family  =  'serif'), panel.grid.major = element_line(linetype  =  'blank'), panel.grid.minor = element_line(size  =  0, linetype  =  'blank'), axis.text = element_text(family  =  'serif', size  =  10), axis.text.x = element_text(family  =  'serif'), axis.text.y = element_text(family  =  'serif'), legend.title = element_text(family  =  'serif'), panel.background = element_rect(size  =  0), plot.background = element_rect(size  =  0))
guide()
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
Porta.5[Porta_F(Porta.5)[Export - Ref.Export > 100, .N]
]
View(Porta.5)
Porta.5[abs(Export - Ref.Export) > 100, .N]]
Porta.5[abs(Export - Ref.Export) > 100, .N]
Porta.5[abs(Exportaciones - Ref.Export) > 100, .N]
p
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
library(ggplot2)
library(ggThemeAssist)
library(plotly)
library(data.table)
library(dplyr)
library(reshape)
library(readr)
library(lattice)
library(shiny)
library(shinythemes)
library(rsconnect)
library(DT)
library(scales)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
head(filter(Pr_2, ano.mes == 1805))
Pr_ClassicTable = rep(0,25)
Pr_ClassicTable
Pr_ClassicTable = data.frame(rep(0,25),5,5)
Pr_ClassicTable
help("data.table")
help("data.frame")
Pr_ClassicTable = data.frame(rep(rep(0,5),5))
Pr_ClassicTable
help("data.frame")
Pr_ClassicTable = data.frame(x = 5, y = 5)
Pr_ClassicTable
Pr_ClassicTable = data.frame(Movistar=integer(), Vodafone=integer(), Orange=integer(), Masmovil=integer(), Resto=integer())
Pr_ClassicTable
rownames(Pr_ClassicTable)= c("Movistar", "Vodafone", "Orange", "Masmovil", "Resto")
help("matrix")
Pr_ClassicTable = matrix(rep(0,25),5,5)
Pr_ClassicTable
rownames(Pr_ClassicTable) = c("Movistar", "Vodafone", "Orange", "Masmovil", "Resto")
rownames(Pr_ClassicTable) = c("Movistar", "Vodafone", "Orange", "Masmovil", "Resto")
Pr_ClassicTable
colnames(Pr_ClassicTable) = c("Movistar", "Vodafone", "Orange", "Masmovil", "Resto")
Pr_ClassicTable
install.packages("formatR")
library(formatR)
tidy_source(width.cutoff = 50)
tidy_source(width.cutoff = 100)
tidy_source(width.cutoff = 120)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
head(Pr_0)
head(Pr_2)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
head(Pr_2)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
filter(Pr_2, ano.mes == 1804)
filter(Pr_2, ano.mes == 1804)[Operador.Grupo == rownames(Pr_ClassicTable)[i] & Donante.Grupo == colnames(Pr_ClassicTable)[j], Importaciones]
filter(Pr_2, ano.mes == 1804)[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == colnames(Pr_ClassicTable)[j], Importaciones]
filter(Pr_2, ano.mes == 1804)[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == colnames(Pr_ClassicTable)[j], "Importaciones"]
class(filter(Pr_2, ano.mes == 1804))
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
Pr_2[ano.mes == 1804,]
Pr_TempTable = as.data.table(filter(Pr_2, ano.mes == input$MinYear))
Pr_ClassicTable = as.data.table(matrix(rep(0,25),5,5))
colnames(Pr_ClassicTable) = c("Movistar", "Vodafone", "Orange", "Masmovil", "Resto")
rownames(Pr_ClassicTable) = c("Movistar", "Vodafone", "Orange", "Masmovil", "Resto")
for (i in 1:nrow(Pr_ClassicTable)) {
for (j in 1:ncol(Pr_ClassicTable)) {
Pr_ClassicTable[i,j] = if (i >= j) { Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == colnames(Pr_ClassicTable)[j], Importaciones] }
else if (i <= j) { Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == colnames(Pr_ClassicTable)[j], Exportaciones] }
else { Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == rownames(Pr_ClassicTable)[i], Importaciones]
}
}
}
Pr_TempTable = as.data.table(filter(Pr_2, ano.mes == input$MinYear))
Pr_ClassicTable = as.data.table(matrix(rep(0,25),5,5))
colnames(Pr_ClassicTable) = c("Movistar", "Vodafone", "Orange", "Masmovil", "Resto")
rownames(Pr_ClassicTable) = c("Movistar", "Vodafone", "Orange", "Masmovil", "Resto")
Pr_TempTable = as.data.table(filter(Pr_2, ano.mes == 1804))
Pr_ClassicTable = as.data.table(matrix(rep(0,25),5,5))
colnames(Pr_ClassicTable) = c("Movistar", "Vodafone", "Orange", "Masmovil", "Resto")
rownames(Pr_ClassicTable) = c("Movistar", "Vodafone", "Orange", "Masmovil", "Resto")
for (i in 1:nrow(Pr_ClassicTable)) {
for (j in 1:ncol(Pr_ClassicTable)) {
Pr_ClassicTable[i,j] = if (i >= j) { Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == colnames(Pr_ClassicTable)[j], Importaciones] }
else if (i <= j) { Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == colnames(Pr_ClassicTable)[j], Exportaciones] }
else { Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == rownames(Pr_ClassicTable)[i], Importaciones]
}
}
}
for (i in 1:nrow(Pr_ClassicTable)) {
for (j in 1:ncol(Pr_ClassicTable)) {
print(parte(i, "-", j))
if (i >= j) { print(Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == colnames(Pr_ClassicTable)[j], Importaciones]) }
else if (i <= j) { print(Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == colnames(Pr_ClassicTable)[j], Exportaciones]) }
else { print(Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == rownames(Pr_ClassicTable)[i], Importaciones])
}
}
}
for (i in 1:nrow(Pr_ClassicTable)) {
for (j in 1:ncol(Pr_ClassicTable)) {
print(paste(i, "-", j))
if (i >= j) { print(Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == colnames(Pr_ClassicTable)[j], Importaciones]) }
else if (i <= j) { print(Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == colnames(Pr_ClassicTable)[j], Exportaciones]) }
else { print(Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == rownames(Pr_ClassicTable)[i], Importaciones])
}
}
}
Pr_TempTable
rownames(Pr_ClassicTable)
rownames(Pr_ClassicTable)[1]
rownames(Pr_ClassicTable)[2]
rownames(Pr_ClassicTable)[2] == "Vodafone"
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
for (i in 1:nrow(Pr_ClassicTable)) {
for (j in 1:ncol(Pr_ClassicTable)) {
print(paste(i, "-", j))
if (i >= j) { print(Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == colnames(Pr_ClassicTable)[j], Importaciones]) }
else if (i <= j) { print(Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == colnames(Pr_ClassicTable)[j], Exportaciones]) }
else { print(Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == rownames(Pr_ClassicTable)[i], Importaciones])
}
}
}
head(Pr_TempTable)
Pr_TempTable
for (i in 1:nrow(Pr_ClassicTable)) {
for (j in 1:ncol(Pr_ClassicTable)) {
print(paste(i, "-", j))
if (i > j) { print(Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == colnames(Pr_ClassicTable)[j], Importaciones]) }
else if (i < j) { print(Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == colnames(Pr_ClassicTable)[j], Exportaciones]) }
else { print(Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == rownames(Pr_ClassicTable)[i], Importaciones])
}
}
}
Pr_TempTable
Pr_ClassicTable
rownames(Pr_ClassicTable) = c("Movistar", "Vodafone", "Orange", "Masmovil", "Resto")
Pr_ClassicTable
rownames(Pr_ClassicTable)
rownames(Pr_ClassicTable)[2]
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
Pr_ClassicTable
Pr_TempTable
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
for (i in 1:nrow(Pr_ClassicTable)) {
for (j in 1:ncol(Pr_ClassicTable)) {
print(paste(i, "-", j))
if (i > j) { print(Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] & Donante.Grupo == colnames(Pr_ClassicTable)[j], Importaciones]) }
else if (i < j) { print(Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == colnames(Pr_ClassicTable)[j], Exportaciones]) }
else { print(Pr_TempTable[Operador.Grupo == rownames(Pr_ClassicTable)[i] && Donante.Grupo == rownames(Pr_ClassicTable)[i], Importaciones])
}
}
}
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
head(Pr_1)
head(Porta.3)
## Simulation starting data
set.seed(0)
## Starting pattern
Pr_0A = data.table()
## Stable random series to transform starting pattern
a = sapply(1:25, FUN = function(x) runif(1,-1,1)) # Serie of 25 random numbers
for (i in c(1610, 1611, 1612, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812)) {
print(i)
a = sapply(a, FUN = function(x) (x + runif(1,-1,1) / 1.1 )) # Modification of the random numbers
# Another random number is summed and it is divided but some number to make some decay.
Pr_0A = rbind(Pr_0A, data.table(
c(rep(i,25)),
c(rep("Movistar",5),
rep("Vodafone",5),
rep("Orange",5),
rep("Masmovil",5),
rep("Resto",5)),
c(rep(c("Movistar", "Vodafone", "Orange", "Masmovil", "Resto"), 5)),
abs(c(1, 6, 5, 7, 2,
4, 2, 7, 2, 3,
6, 4, 2, 4, 3,
8, 8, 7, 1, 2,
5, 4, 5, 4, 5
) + a )
))
}
colnames(Pr_0A) <- c("ano.mes","Operador.Grupo", "Donante.Grupo", "Importaciones")
Pr_0A[,ano.mes:= as.integer(ano.mes)]
# Reference adjust
Pr_1 = Pr_0A
Pr_2 = Pr_1
## 3.2 Removing self-portabilities
Pr_2 = Pr_2[!which(Pr_2$Donante.Grupo == Pr_2$Operador.Grupo),]
Pr_2$Exportaciones = apply(Pr_2, 1, FUN = function(x) {
TargetRow = intersect(which(Pr_1$Donante.Grupo == x["Operador.Grupo"]),
intersect(which(Pr_2$Operador.Grupo == x["Donante.Grupo"]),
which(Pr_2$ano.mes == x["ano.mes"])))
Pr_2$Importaciones[TargetRow]
})
#### cambio dataset
Porta.1 = Pr_2
Porta.3 = Pr_2
#
# Porta.3$Importaciones = sapply(Porta.1$Importaciones, function(x) {
#   x = x + x * runif(1,0,2)
#   x
# })
Porta.4 = as.data.table(Porta.3)
Porta.4 = Porta.4[Pr_Ref, .(ano.mes, Operador.Grupo, Donante.Grupo, Importaciones, Exportaciones, Ref.Import, Ref.Export), on = .(ano.mes, Operador.Grupo), nomatch = 0]
Porta.5 = Porta.4
Porta_F = function(x) {x %>%
.[, .( resta = sum(Importaciones)-mean(Ref.Import), Import = sum(Importaciones), Ref.Import = mean(Ref.Import), Export = sum(Exportaciones), Ref.Export = mean(Ref.Export)), by = list(ano.mes, Operador.Grupo)]}
#while (Porta.5[abs(Exportaciones - Ref.Export) > 100, .N)]
for (z in levels(as.factor(Porta.5$ano.mes))) {
for (i in levels(as.factor(Porta.5$Operador.Grupo))) {
print(i)
print(z)
if (abs(Porta_F(Porta.5[ano.mes == z,])[Operador.Grupo == i,resta]) > 2)
{ Porta.5[ano.mes == z,][Operador.Grupo == i, "Importaciones" ] = Porta.5[ano.mes == z,][Operador.Grupo == i, "Importaciones"] * Porta_F(Porta.5[ano.mes == z,])[Operador.Grupo == i, Ref.Import/Import]}
}
}
## CNMC data
## Import data
Pr_X = fread("C:\\Users\\a1380\\Desktop\\Portability Project\\9. Portabilidades de numeraciรณn mรณvil.csv",skip = 4)
colnames(Pr_X)[2] = "Operador.Grupo"
Pr_X[, V1 := NULL]
Pr_X = Pr_X[c(2:7, 9:14)][, Operador.Grupo := c("Movistar", "Vodafone", "Orange", "Yoigo", "Masmovil", "Resto","Movistar", "Vodafone", "Orange", "Yoigo", "Masmovil", "Resto")]
Pr_X = Pr_X[Operador.Grupo %in% c("Movistar", "Vodafone", "Orange", "Masmovil", "Resto"),]
##
colnames(Pr_X)[2:length(colnames(Pr_X))] = colnames(Pr_X)[2:length(colnames(Pr_X))] %>%
substring(1,3) %>%
sapply(.,function(x) do.call("switch", as.list(c(x,"Ene" = "01","Feb" = "02", "Mar" = "03", "Abr" = "04", "May" = "05", "Jun" = "06", "Jul" = "07", "Ago" = "08", "Sep" = "09", "Oct" = "10", "Nov" = "11", "Dic" = "12")))) %>%
paste(substring(colnames(Pr_X)[2:length(colnames(Pr_X))], 7, 8), sep = "",.)
## Pivoting year columns
## Export elements
Pr_Exp <- melt(Pr_X[6:10], id=c("Operador.Grupo"))
colnames(Pr_Exp)[2:3] = c("ano.mes", "Ref.Export")
## Import elements
Pr_Imp <- melt(Pr_X[1:5], id=c("Operador.Grupo"))
colnames(Pr_Imp)[2:3] = c("ano.mes", "Ref.Import")
## Joining both elements
Pr_Ref = Pr_Imp[Pr_Exp, .(ano.mes, Operador.Grupo, Ref.Import, Ref.Export), on = .(ano.mes, Operador.Grupo)]
## Selecting recent data (after transformingobject classes)
Pr_Ref[,ano.mes := sapply(ano.mes, as.character)][,ano.mes := sapply(ano.mes, as.integer)][ano.mes > 1609]
## Simulation starting data
set.seed(0)
## Starting pattern
Pr_0A = data.table()
## Stable random series to transform starting pattern
a = sapply(1:25, FUN = function(x) runif(1,-1,1)) # Serie of 25 random numbers
for (i in c(1610, 1611, 1612, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812)) {
print(i)
a = sapply(a, FUN = function(x) (x + runif(1,-1,1) / 1.1 )) # Modification of the random numbers
# Another random number is summed and it is divided but some number to make some decay.
Pr_0A = rbind(Pr_0A, data.table(
c(rep(i,25)),
c(rep("Movistar",5),
rep("Vodafone",5),
rep("Orange",5),
rep("Masmovil",5),
rep("Resto",5)),
c(rep(c("Movistar", "Vodafone", "Orange", "Masmovil", "Resto"), 5)),
abs(c(1, 6, 5, 7, 2,
4, 2, 7, 2, 3,
6, 4, 2, 4, 3,
8, 8, 7, 1, 2,
5, 4, 5, 4, 5
) + a )
))
}
colnames(Pr_0A) <- c("ano.mes","Operador.Grupo", "Donante.Grupo", "Importaciones")
Pr_0A[,ano.mes:= as.integer(ano.mes)]
# Reference adjust
Pr_1 = Pr_0A
Pr_2 = Pr_1
## 3.2 Removing self-portabilities
Pr_2 = Pr_2[!which(Pr_2$Donante.Grupo == Pr_2$Operador.Grupo),]
Pr_2$Exportaciones = apply(Pr_2, 1, FUN = function(x) {
TargetRow = intersect(which(Pr_2$Donante.Grupo == x["Operador.Grupo"]),
intersect(which(Pr_2$Operador.Grupo == x["Donante.Grupo"]),
which(Pr_2$ano.mes == x["ano.mes"])))
Pr_2$Importaciones[TargetRow]
})
#### cambio dataset
Porta.1 = Pr_2
Porta.3 = Pr_2
#
# Porta.3$Importaciones = sapply(Porta.1$Importaciones, function(x) {
#   x = x + x * runif(1,0,2)
#   x
# })
Porta.4 = as.data.table(Porta.3)
Porta.4 = Porta.4[Pr_Ref, .(ano.mes, Operador.Grupo, Donante.Grupo, Importaciones, Exportaciones, Ref.Import, Ref.Export), on = .(ano.mes, Operador.Grupo), nomatch = 0]
Porta.5 = Porta.4
Porta_F = function(x) {x %>%
.[, .( resta = sum(Importaciones)-mean(Ref.Import), Import = sum(Importaciones), Ref.Import = mean(Ref.Import), Export = sum(Exportaciones), Ref.Export = mean(Ref.Export)), by = list(ano.mes, Operador.Grupo)]}
#while (Porta.5[abs(Exportaciones - Ref.Export) > 100, .N)]
for (z in levels(as.factor(Porta.5$ano.mes))) {
for (i in levels(as.factor(Porta.5$Operador.Grupo))) {
print(i)
print(z)
if (abs(Porta_F(Porta.5[ano.mes == z,])[Operador.Grupo == i,resta]) > 2)
{ Porta.5[ano.mes == z,][Operador.Grupo == i, "Importaciones" ] = Porta.5[ano.mes == z,][Operador.Grupo == i, "Importaciones"] * Porta_F(Porta.5[ano.mes == z,])[Operador.Grupo == i, Ref.Import/Import]}
}
}
Pr_2 = Pr_1
Pr_2$Exportaciones = apply(Pr_1, 1, FUN = function(x) {
TargetRow = intersect(which(Pr_1$Donante.Grupo == x["Operador.Grupo"]),
intersect(which(Pr_1$Operador.Grupo == x["Donante.Grupo"]),
which(Pr_1$ano.mes == x["ano.mes"])))
Pr_1$Importaciones[TargetRow]
})
## 3.2 Removing self-portabilities
Pr_2 = Pr_2[!which(Pr_2$Donante.Grupo == Pr_2$Operador.Grupo),]
#### 4.Shiny Application ####
## 4.1 Adjustments
options(scipen=999)
zones = data.frame(c(1,1,1,1,2,2,2,2), c(0, 0, 300000, 0, 300000, 300000, 0, 0),
c(0, 300000, 300000, 0, 0, 300000, 0, 0),
c("#FD625E", "#FD625E", "#FD625E", "#FD625E", "#66CC00", "#66CC00", "#66CC00", "#66CC00"))
colnames(zones) = c("group", "Importaciones", "Exportaciones", "color")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
Pr_1 = Porta.5
Pr_2 = Pr_1
Pr_2$Exportaciones = apply(Pr_1, 1, FUN = function(x) {
TargetRow = intersect(which(Pr_1$Donante.Grupo == x["Operador.Grupo"]),
intersect(which(Pr_1$Operador.Grupo == x["Donante.Grupo"]),
which(Pr_1$ano.mes == x["ano.mes"])))
Pr_1$Importaciones[TargetRow]
})
## 3.2 Removing self-portabilities
Pr_2 = Pr_2[!which(Pr_2$Donante.Grupo == Pr_2$Operador.Grupo),]
#### 4.Shiny Application ####
## 4.1 Adjustments
options(scipen=999)
zones = data.frame(c(1,1,1,1,2,2,2,2), c(0, 0, 300000, 0, 300000, 300000, 0, 0),
c(0, 300000, 300000, 0, 0, 300000, 0, 0),
c("#FD625E", "#FD625E", "#FD625E", "#FD625E", "#66CC00", "#66CC00", "#66CC00", "#66CC00"))
colnames(zones) = c("group", "Importaciones", "Exportaciones", "color")
Pr_1 = Porta.5
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
