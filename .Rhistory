runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
head(Pr_2)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
head(Pr_2)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
head(Pr_2)
help("renderDataTable")
shinyApp(
ui = fluidPage(DTOutput('tbl')),
server = function(input, output) {
output$tbl = renderDT(
iris, options = list(lengthChange = FALSE)
)
}
)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help(setDT())
help(setDT
)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
# 1.1 Library Load
library(ggplot2)
library(data.table)
library(dplyr)
library(reshape)
library(readr)
library(lattice)
library(shiny)
library(shinythemes)
library(rsconnect)
library(DT)
# 1.2 Data Load
setwd("C:\\Users\\a1380\\Desktop\\Portability Project")
Pr_1 = fread("Portability_sim_data.csv")
#### 2.Server Configuration ####
# 2.1 Shinyapps.io login
secret = readLines(con = "C:/Users/a1380/Documents/CredencialShiny.txt")
rsconnect::setAccountInfo(name='nspproject',
token='84DA9E67B476250E326ED7FAB04F4E9E',
secret=secret)
# 2.2 Shinyapp.io deployment
rsconnect::deployApp("C:/Users/a1380/Desktop/Portability Project")
#### 3.Data Manipulation ####
## 3.1 Creating Pr_2 table, to be used in the visualizations.
Pr_2 = Pr_1
Pr_2$Exportaciones = apply(Pr_1, 1, FUN = function(x) {
TargetRow = intersect(which(Pr_1$Donante.Grupo == x["Operador.Grupo"]),
intersect(which(Pr_1$Operador.Grupo == x["Donante.Grupo"]),
which(Pr_1$ano.mes == x["ano.mes"])))
Pr_1$Importaciones[TargetRow]
})
## 3.2 Removing self-portabilities
Pr_2 = Pr_2[-which(Pr_2$Donante.Grupo == Pr_2$Operador.Grupo),]
#### 4.Shiny Application ####
## 4.1 Adjustments
options(scipen=999)
zones = data.frame(c(1,1,1,1,2,2,2,2), c(0, 0, 300000, 0, 300000, 300000, 0, 0),
c(0, 300000, 300000, 0, 0, 300000, 0, 0),
c("#FD625E", "#FD625E", "#FD625E", "#FD625E", "#66CC00", "#66CC00", "#66CC00", "#66CC00"))
colnames(zones) = c("group", "Importaciones", "Exportaciones", "color")
## 4.2 ui and server
ui <- fluidPage(theme = shinytheme("cerulean"),
# App title
column(width = 8,titlePanel("CdM Portability Spain", windowTitle = "Portabilidad"), offset = 3),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel( width = 3,
h3("Selection"),      # Third level header: Selection
# Select Operator
selectInput(inputId = "Operator",
label = "Operator:",
choices = c("Vodafone", "Movistar", "Orange", "Masmovil", "Resto"),
selected = "Vodafone"
),
# Select Years
selectInput(inputId = "MinYear",
label = "MinimumYear:",
choices = levels(as.factor(Pr_2$ano.mes)),
selected = "1712"
),
# Built with Shiny by RStudio
br(),
h5("Built with",
img(src = "https://www.rstudio.com/wp-content/uploads/2014/04/shiny.png", height = "30px"),
"by"),
h5("Ignacio Sánchez Puente"),
img(src = "image.png", height = "50px")
),
# Output:
mainPanel(tabsetPanel(type = "tabs",
tabPanel(title = "Overview",
h3("Overview"),
br(),
HTML("Here goes the content"),
plotOutput(outputId = "waterfall")),
tabPanel(title = "Portability Graph",
h3("Portability graph"),
br(),
h5(imageOutput("Op1", width = "10%", height = "10%", inline = TRUE),
imageOutput("Op2", width = "10%", height = "10%", inline = TRUE),
imageOutput("Op3", width = "10%", height = "10%", inline = TRUE),
imageOutput("Op4", width = "10%", height = "10%", inline = TRUE),
imageOutput("Op5", width = "10%", height = "10%", inline = TRUE)),
plotOutput(outputId = "scatterplot"),
textOutput(outputId = "description")),
tabPanel(title = "Raw table",
h3("Raw Table"),
br(),
DT::dataTableOutput(outputId = "rawtable"), #tableOutput(outputId = "rawtable"),
downloadButton(outputId = "download_data", label = "Download data"))
)
)
)
)
server <- function(input, output) {
Upd.Pr_1 <- reactive({filter(Pr_1, Operador.Grupo == input$Operator & ano.mes >= input$MinYear)})
Upd.Pr_2 <- reactive({filter(Pr_2, Operador.Grupo == input$Operator & ano.mes >= input$MinYear)})
Upd.Pr_Waterfall <- reactive({Upd.Pr_2[, .( Import = sum(Importaciones),
Export = sum(Exportaciones)),
by = list(ano.mes, Operador.Grupo)] %>%
.[,"end":= cumsum(Upd.Pr_2$Import - Upd.Pr_2$Export)] %>%
.[,"start" := c(0, Upd.Pr_2[1:(.N-2), end], 0)]  %>%
.[, "id" := 1:.N] %>%
.[,"sign" := {if(Import - Export >= 0) {"b"} else {"a"}}, by = id] %>%
.[c(1, .N),"sign" := "c"]
})
filetype = "csv"
output$download_data <- downloadHandler(
filename = function() {
paste("test.csv")
},
content = function(file) {
if(filetype == "csv"){
write_csv(Upd.Pr_1(), path = file)
}
}
)
output$description <- renderText({
paste0(nrow(Upd.Pr_1()))})
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = Upd.Pr_2(),
aes(y = Importaciones, x = Exportaciones)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_line(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(label = Upd.Pr_2()[,"ano.mes"], y = Importaciones + 5000), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Upd.Pr_2()[, "Donante.Grupo"])),
function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA"))) +
coord_cartesian(xlim = c(0, max(Upd.Pr_2()[,c("Importaciones", "Exportaciones")]) * 1.04), ylim = c(0, max(Upd.Pr_2()[,c("Importaciones", "Exportaciones")]) * 1.04))
})
# Create waterfall object the plotOutput function is expecting
output$waterfall <- renderPlot({ggplot(data = Upd.Pr_Waterfall(),
aes(Importaciones - Exportaciones)) +
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
})
#Operator images
output$Op1 <- renderImage({list(src = if(input$Operator == "Vodafone") {"www/VODAFONE.png"} else {"www/VODAFONE_LIGHT.png"}, contentType = 'image/png', width = 100)}, deleteFile = FALSE)
output$Op2 <- renderImage({list(src = if(input$Operator == "Movistar") {"www/MOVISTAR.png"} else {"www/MOVISTAR_LIGHT.png"}, contentType = 'image/png', width = 100)}, deleteFile = FALSE)
output$Op3 <- renderImage({list(src = if(input$Operator == "Orange") {"www/ORANGE.png"} else {"www/ORANGE_LIGHT.png"}, contentType = 'image/png', width = 100)}, deleteFile = FALSE)
output$Op4 <- renderImage({list(src = if(input$Operator == "Masmovil") {"www/MASMOVIL.png"} else {"www/MASMOVIL_LIGHT.png"}, contentType = 'image/png', width = 100)}, deleteFile = FALSE)
output$Op5 <- renderImage({list(src = if(input$Operator == "Resto") {"www/RESTO.png"} else {"www/RESTO_LIGHT.png"}, contentType = 'image/png', width = 100)}, deleteFile = FALSE)
#Create rawtable object the plotOutput function is expecting
output$rawtable <- DT::renderDataTable({DT::datatable(Upd.Pr_1(), options = list(pageLength = 10))}) #renderTable({Pr_1})
}
## 4.3 Running the app
shinyApp(ui = ui, server = server)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
Porta.5 = Porta.4
Porta_F = function(x) {x %>%
.[, .( resta = sum(Importaciones)-sum(Referencia), Import = sum(Importaciones), Refer = sum(Referencia), Export = sum(Exportaciones)), by = list(ano.mes, Operador.Grupo)]}
Pr_X = Porta.5_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N][,"sign" := {if(Import - Export >= 0) {"b"} else {"a"}}, by = id][c(1, .N),"sign" := "c"]
ggplot(Pr_X, aes(id, fill = sign))+
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
## Gráfico cascada
Pr_X = Porta_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N][,"sign" := {if(Import - Export >= 0) {"b"} else {"a"}}, by = id][c(1, .N),"sign" := "c"]
ggplot(Pr_X, aes(id, fill = sign))+
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start))
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
Pr_X
Pr_X
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
head(Pr_2)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help(get)
class(Pr_2)
class(Pr_1)
class(Pr_X)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
head(Pr_X)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
Pr_X = Porta_F(Pr_2[Operador.Grupo == "Vodafone"])
head(Pr_X)
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N][,"sign" := {if(Import - Export >= 0) {"b"} else {"a"}}, by = id][c(1, .N),"sign" := "c"]
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
View(Pr_X)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
Pr_X = Porta_F(Pr_2[Operador.Grupo == "Vodafone"])
head(Pr_X)
Pr_X = Porta_F(Pr_2[Operador.Grupo == "Vodafone"])
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
install.packages("ggrepel")
library("ggrepel")
Pr_X = Porta_F(Pr_2[Operador.Grupo == "Vodafone"])
Pr_X[,"end":= cumsum(Pr_X$Import - Pr_X$Export)][,"start" := c(0, Pr_X[1:(.N-2), end], 0)]
Pr_X[, "id" := 1:.N][,"sign" := {if(Import - Export >= 0) {"b"} else {"a"}}, by = id][c(1, .N),"sign" := "c"]
ggplot(Pr_X, aes(id, fill = sign)) +
geom_rect(aes(xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start)) +
geom_text_repel(aes(label=ano.mes), size = 3)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
theme_new <- theme_bw() +
theme(plot.background = element_rect(size = 1, color = "blue", fill = "black"),
text=element_text(size = 12, family = "Serif", color = "ivory"),
axis.text.y = element_text(colour = "purple"),
axis.text.x = element_text(colour = "red"),
panel.background = element_rect(fill = "pink"),
strip.background = element_rect(fill = muted("orange")))
help(muted)
library(scales)
theme_new <- theme_bw() +
theme(plot.background = element_rect(size = 1, color = "blue", fill = "black"),
text=element_text(size = 12, family = "Serif", color = "ivory"),
axis.text.y = element_text(colour = "purple"),
axis.text.x = element_text(colour = "red"),
panel.background = element_rect(fill = "pink"),
strip.background = element_rect(fill = muted("orange")))
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
scale_fill_continuous(label=comma)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help("scale_x_continuous")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help(seq)
help(floor)
floor(max(4) / 3)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
seq(from = 0, to = 3 * floor(max(9) / 3)
, by = 3)
x_breaks = seq(from = 0, to = 3 * floor(max(id) / 3), by = 3)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
p1 <- ggplot(mpg, aes(displ, hwy)) +
geom_point()
p1
# Manipulating the default position scales lets you:
#  * change the axis labels
p1 +
scale_x_continuous("Engine displacement (L)") +
scale_y_continuous("Highway MPG")
# You can also use the short-cut labs().
# Use NULL to suppress axis labels
p1 + labs(x = NULL, y = NULL)
#  * modify the axis limits
p1 + scale_x_continuous(limits = c(2, 6))
p1 + scale_x_continuous(limits = c(0, 10))
# you can also use the short hand functions `xlim()` and `ylim()`
p1 + xlim(2, 6)
#  * choose where the ticks appear
p1 + scale_x_continuous(breaks = c(2, 4, 6))
#  * add what labels they have
p1 + scale_x_continuous(
breaks = c(2, 4, 6),
label = c("two", "four", "six")
)
# Typically you'll pass a function to the `labels` argument.
# Some common formats are built into the scales package:
df <- data.frame(
x = rnorm(10) * 100000,
y = seq(0, 1, length.out = 10)
)
p2 <- ggplot(df, aes(x, y)) + geom_point()
p2 + scale_y_continuous(labels = scales::percent)
p2 + scale_y_continuous(labels = scales::dollar)
p2 + scale_x_continuous(labels = scales::comma)
help("renderPlot")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help(theme)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help("element_rect")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help(h5)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help("scale_color_manual")
a = c("d", "c", "j")
levels(a)
a = as.factor(c("d", "c", "j"))
levels(a)
switch(a, c= "green", d = "red", j = "grey")
switch(a, "c" = "green", d = "red", j = "grey")
switch(levels(a), c = "green", d = "red", j = "grey")
switch(levels(a), "c" = "green", "d" = "red", "j" = "grey")
class(levels(s))
class(levels(a))
switch(c(levels(a)), "c" = "green", "d" = "red", "j" = "grey")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
apply(levels(a), switch("c" = "green", "d" = "red", "j" = "grey"))
apply(levels(a), FUN =switch("c" = "green", "d" = "red", "j" = "grey"))
apply(levels(a), FUN =switch(c = "green", "d" = "red", "j" = "grey"))
apply(x = levels(a), FUN = function(x) switch(x, "c" = "green", "d" = "red", "j" = "grey"))
apply(x = levels(a), FUN = function(x) switch(x, "c" = "green", "d" = "red", "j" = "grey"))
sapply(x = levels(a), FUN = function(x) switch(x, "c" = "green", "d" = "red", "j" = "grey"))
sapply(levels(a), FUN = function(x) switch(x, "c" = "green", "d" = "red", "j" = "grey"))
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
sapply(levels(a), FUN = function(x) switch(x, "c" = "green", "d" = "red", "j" = "grey"))
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
sapply(c("Negative", "Positive"), FUN = function(x) switch(x,"Positive" = "#66CC00", "Negative" = "#FD625E", "Net" = "#56B4E9"))
sapply(c("Negative", "Positive", "Net"), FUN = function(x) switch(x,"Positive" = "#66CC00", "Negative" = "#FD625E", "Net" = "#56B4E9"))
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help(h5)
help(h5)
help(h5)
help("renderPlot")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
HELP(sidebarPanel)
Help(sidebarPanel)
help(sidebarPanel)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help(sidebarPanel)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help(element_text)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help(theme)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help(theme)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help("renderPlot")
help("plotOutput")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help("plotOutput")
help(plotOutput)
help("renderPlot")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help("renderPlot")
help("plotOutput")
help(h5)
help("plotOutput")
help("imageçOutput")
help("imageOutput")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
