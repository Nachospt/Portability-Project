list(src = f)
},deleteFile = TRUE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
output$Op2 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = TRUE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
output$Op3 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = FALSE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
output$Op4 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = FALSE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
output$Op5 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = FALSE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
# Create rawtable object the plotOutput function is expecting
output$rawtable <- DT::renderDataTable({DT::datatable(Upd.Pr_1(), options = list(pageLength = 10))}) #renderTable({Pr_1})
}
## 4.3 Running the app
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme("cerulean"),
# App title
column(width = 8,titlePanel("CdM Portability Spain", windowTitle = "Portabilidad"), offset = 3),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel( width = 3,
h3("Selection"),      # Third level header: Selection
# Select Operator
selectInput(inputId = "Operator",
label = "Operator:",
choices = c("Vodafone", "Movistar", "Orange", "Masmovil", "Resto"),
selected = "Vodafone"
),
# Select Years
selectInput(inputId = "MinYear",
label = "MinimumYear:",
choices = levels(as.factor(Pr_2$ano.mes)),
selected = "1712"
),
# Built with Shiny by RStudio
br(),
h5("Built with",
img(src = "https://www.rstudio.com/wp-content/uploads/2014/04/shiny.png", height = "30px"),
"by"),
h5("Ignacio Sánchez Puente"),
img(src = "image.png", height = "50px")
),
# Output:
mainPanel(tabsetPanel(type = "tabs",
tabPanel(title = "Overview",
h3("Overview"),
br(),
HTML("Here goes the content")),
tabPanel(title = "Portability Graph",
h3("Portability graph"),
br(),
imageOutput("myImage"),
plotOutput(outputId = "scatterplot"),
textOutput(outputId = "description")),
tabPanel(title = "Raw table",
h3("Raw Table"),
br(),
DT::dataTableOutput(outputId = "rawtable"), #tableOutput(outputId = "rawtable"),
downloadButton(outputId = "download_data", label = "Download data"))
)
)
)
)
server <- function(input, output) {
Upd.Pr_1 <- reactive({filter(Pr_1, Operador.Grupo == input$Operator & ano.mes >= input$MinYear)})
Upd.Pr_2 <- reactive({filter(Pr_2, Operador.Grupo == input$Operator & ano.mes >= input$MinYear)})
filetype = "csv"
output$download_data <- downloadHandler(
filename = function() {
paste("test.csv")
},
content = function(file) {
if(filetype == "csv"){
write_csv(Upd.Pr_1(), path = file)
}
}
)
output$description <- renderText({
paste0(nrow(Upd.Pr_1()))})
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = Upd.Pr_2(),
aes(y = Importaciones, x = Exportaciones)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_line(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(label = Upd.Pr_2()[,"ano.mes"], y = Importaciones + 5000), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Upd.Pr_2()[, "Donante.Grupo"])), function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA"))) +
coord_cartesian(xlim = c(0, max(Upd.Pr_2()[,c("Importaciones", "Exportaciones")]) * 1.04), ylim = c(0, max(Upd.Pr_2()[,c("Importaciones", "Exportaciones")]) * 1.04))
})
#Operator images
output$myImage <- renderImage({
# A temp file to save the output.
# This file will be removed later by renderImage
outfile <- tempfile(fileext = '.png')
# Generate the PNG
png(outfile, width = 400, height = 300)
hist(rnorm(10), main = "Generated in renderImage()")
dev.off()
# Return a list containing the filename
list(src = outfile,
contentType = 'image/png',
width = 400,
height = 300,
alt = "This is alternate text")
}, deleteFile = TRUE)
output$Op1 <- renderImage({ f = tempfile(fileext = '.png')
png(f, width = 200, height = 100)
list(src = f)
},deleteFile = TRUE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
output$Op2 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = TRUE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
output$Op3 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = FALSE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
output$Op4 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = FALSE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
output$Op5 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = FALSE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
# Create rawtable object the plotOutput function is expecting
output$rawtable <- DT::renderDataTable({DT::datatable(Upd.Pr_1(), options = list(pageLength = 10))}) #renderTable({Pr_1})
}
## 4.3 Running the app
shinyApp(ui = ui, server = server)
help("renderImage")
ui <- fluidPage(theme = shinytheme("cerulean"),
# App title
column(width = 8,titlePanel("CdM Portability Spain", windowTitle = "Portabilidad"), offset = 3),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel( width = 3,
h3("Selection"),      # Third level header: Selection
# Select Operator
selectInput(inputId = "Operator",
label = "Operator:",
choices = c("Vodafone", "Movistar", "Orange", "Masmovil", "Resto"),
selected = "Vodafone"
),
# Select Years
selectInput(inputId = "MinYear",
label = "MinimumYear:",
choices = levels(as.factor(Pr_2$ano.mes)),
selected = "1712"
),
# Built with Shiny by RStudio
br(),
h5("Built with",
img(src = "https://www.rstudio.com/wp-content/uploads/2014/04/shiny.png", height = "30px"),
"by"),
h5("Ignacio Sánchez Puente"),
img(src = "image.png", height = "50px")
),
# Output:
mainPanel(tabsetPanel(type = "tabs",
tabPanel(title = "Overview",
h3("Overview"),
br(),
HTML("Here goes the content")),
tabPanel(title = "Portability Graph",
h3("Portability graph"),
br(),
imageOutput(if(input$Operator == "Vodafone") {"C:\\Users\\a1380\\Desktop\\Portability Project\\www\\VODAFONE.png"}),
#imageOutput("myImage"),
plotOutput(outputId = "scatterplot"),
textOutput(outputId = "description")),
tabPanel(title = "Raw table",
h3("Raw Table"),
br(),
DT::dataTableOutput(outputId = "rawtable"), #tableOutput(outputId = "rawtable"),
downloadButton(outputId = "download_data", label = "Download data"))
)
)
)
)
server <- function(input, output) {
Upd.Pr_1 <- reactive({filter(Pr_1, Operador.Grupo == input$Operator & ano.mes >= input$MinYear)})
Upd.Pr_2 <- reactive({filter(Pr_2, Operador.Grupo == input$Operator & ano.mes >= input$MinYear)})
filetype = "csv"
output$download_data <- downloadHandler(
filename = function() {
paste("test.csv")
},
content = function(file) {
if(filetype == "csv"){
write_csv(Upd.Pr_1(), path = file)
}
}
)
output$description <- renderText({
paste0(nrow(Upd.Pr_1()))})
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = Upd.Pr_2(),
aes(y = Importaciones, x = Exportaciones)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_line(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(label = Upd.Pr_2()[,"ano.mes"], y = Importaciones + 5000), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Upd.Pr_2()[, "Donante.Grupo"])), function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA"))) +
coord_cartesian(xlim = c(0, max(Upd.Pr_2()[,c("Importaciones", "Exportaciones")]) * 1.04), ylim = c(0, max(Upd.Pr_2()[,c("Importaciones", "Exportaciones")]) * 1.04))
})
# #Operator images
#
# output$myImage <- renderImage({
#   # A temp file to save the output.
#   # This file will be removed later by renderImage
#   outfile <- tempfile(fileext = '.png')
#
#   # Generate the PNG
#   png(outfile, width = 400, height = 300)
#   img()
#   hist(rnorm(10), main = "Generated in renderImage()")
#   dev.off()
#
#   # Return a list containing the filename
#   list(src = outfile,
#        contentType = 'image/png',
#        width = 400,
#        height = 300,
#        alt = "This is alternate text")
# }, deleteFile = TRUE)
#
# output$Op1 <- renderImage({ f = tempfile(fileext = '.png')
# png(f, width = 200, height = 100)
# list(src = f)
# },deleteFile = TRUE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
# output$Op2 <- renderImage({list(src = "C:\\Users\\a1380\\Desktop\\Portability Project\\VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = TRUE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
# output$Op3 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = FALSE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
# output$Op4 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = FALSE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
# output$Op5 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = FALSE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
#
# Create rawtable object the plotOutput function is expecting
output$rawtable <- DT::renderDataTable({DT::datatable(Upd.Pr_1(), options = list(pageLength = 10))}) #renderTable({Pr_1})
}
## 4.3 Running the app
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme("cerulean"),
# App title
column(width = 8,titlePanel("CdM Portability Spain", windowTitle = "Portabilidad"), offset = 3),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel( width = 3,
h3("Selection"),      # Third level header: Selection
# Select Operator
selectInput(inputId = "Operator",
label = "Operator:",
choices = c("Vodafone", "Movistar", "Orange", "Masmovil", "Resto"),
selected = "Vodafone"
),
# Select Years
selectInput(inputId = "MinYear",
label = "MinimumYear:",
choices = levels(as.factor(Pr_2$ano.mes)),
selected = "1712"
),
# Built with Shiny by RStudio
br(),
h5("Built with",
img(src = "https://www.rstudio.com/wp-content/uploads/2014/04/shiny.png", height = "30px"),
"by"),
h5("Ignacio Sánchez Puente"),
img(src = "image.png", height = "50px")
),
# Output:
mainPanel(tabsetPanel(type = "tabs",
tabPanel(title = "Overview",
h3("Overview"),
br(),
HTML("Here goes the content")),
tabPanel(title = "Portability Graph",
h3("Portability graph"),
br(),
imageOutput(if(input$Operator == "Vodafone") {"C:\\Users\\a1380\\Desktop\\Portability Project\\www\\VODAFONE.png"}, height = "30px"),
img(if(input$Operator == "Vodafone") {"C:\\Users\\a1380\\Desktop\\Portability Project\\www\\VODAFONE.png"}, height = "30px"),
#imageOutput("myImage"),
plotOutput(outputId = "scatterplot"),
textOutput(outputId = "description")),
tabPanel(title = "Raw table",
h3("Raw Table"),
br(),
DT::dataTableOutput(outputId = "rawtable"), #tableOutput(outputId = "rawtable"),
downloadButton(outputId = "download_data", label = "Download data"))
)
)
)
)
server <- function(input, output) {
Upd.Pr_1 <- reactive({filter(Pr_1, Operador.Grupo == input$Operator & ano.mes >= input$MinYear)})
Upd.Pr_2 <- reactive({filter(Pr_2, Operador.Grupo == input$Operator & ano.mes >= input$MinYear)})
filetype = "csv"
output$download_data <- downloadHandler(
filename = function() {
paste("test.csv")
},
content = function(file) {
if(filetype == "csv"){
write_csv(Upd.Pr_1(), path = file)
}
}
)
output$description <- renderText({
paste0(nrow(Upd.Pr_1()))})
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = Upd.Pr_2(),
aes(y = Importaciones, x = Exportaciones)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_line(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(label = Upd.Pr_2()[,"ano.mes"], y = Importaciones + 5000), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Upd.Pr_2()[, "Donante.Grupo"])), function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA"))) +
coord_cartesian(xlim = c(0, max(Upd.Pr_2()[,c("Importaciones", "Exportaciones")]) * 1.04), ylim = c(0, max(Upd.Pr_2()[,c("Importaciones", "Exportaciones")]) * 1.04))
})
# #Operator images
#
# output$myImage <- renderImage({
#   # A temp file to save the output.
#   # This file will be removed later by renderImage
#   outfile <- tempfile(fileext = '.png')
#
#   # Generate the PNG
#   png(outfile, width = 400, height = 300)
#   img()
#   hist(rnorm(10), main = "Generated in renderImage()")
#   dev.off()
#
#   # Return a list containing the filename
#   list(src = outfile,
#        contentType = 'image/png',
#        width = 400,
#        height = 300,
#        alt = "This is alternate text")
# }, deleteFile = TRUE)
#
# output$Op1 <- renderImage({ f = tempfile(fileext = '.png')
# png(f, width = 200, height = 100)
# list(src = f)
# },deleteFile = TRUE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
# output$Op2 <- renderImage({list(src = "C:\\Users\\a1380\\Desktop\\Portability Project\\VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = TRUE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
# output$Op3 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = FALSE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
# output$Op4 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = FALSE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
# output$Op5 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = FALSE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
#
# Create rawtable object the plotOutput function is expecting
output$rawtable <- DT::renderDataTable({DT::datatable(Upd.Pr_1(), options = list(pageLength = 10))}) #renderTable({Pr_1})
}
## 4.3 Running the app
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme("cerulean"),
# App title
column(width = 8,titlePanel("CdM Portability Spain", windowTitle = "Portabilidad"), offset = 3),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel( width = 3,
h3("Selection"),      # Third level header: Selection
# Select Operator
selectInput(inputId = "Operator",
label = "Operator:",
choices = c("Vodafone", "Movistar", "Orange", "Masmovil", "Resto"),
selected = "Vodafone"
),
# Select Years
selectInput(inputId = "MinYear",
label = "MinimumYear:",
choices = levels(as.factor(Pr_2$ano.mes)),
selected = "1712"
),
# Built with Shiny by RStudio
br(),
h5("Built with",
img(src = "https://www.rstudio.com/wp-content/uploads/2014/04/shiny.png", height = "30px"),
"by"),
h5("Ignacio Sánchez Puente"),
img(src = "image.png", height = "50px")
),
# Output:
mainPanel(tabsetPanel(type = "tabs",
tabPanel(title = "Overview",
h3("Overview"),
br(),
HTML("Here goes the content")),
tabPanel(title = "Portability Graph",
h3("Portability graph"),
br(),
# imageOutput(if(input$Operator == "Vodafone") {"C:\\Users\\a1380\\Desktop\\Portability Project\\www\\VODAFONE.png"}, height = "30px"),
img(src = "C:\\Users\\a1380\\Desktop\\Portability Project\\www\\VODAFONE.png", height = "30px"),
#imageOutput("myImage"),
plotOutput(outputId = "scatterplot"),
textOutput(outputId = "description")),
tabPanel(title = "Raw table",
h3("Raw Table"),
br(),
DT::dataTableOutput(outputId = "rawtable"), #tableOutput(outputId = "rawtable"),
downloadButton(outputId = "download_data", label = "Download data"))
)
)
)
)
server <- function(input, output) {
Upd.Pr_1 <- reactive({filter(Pr_1, Operador.Grupo == input$Operator & ano.mes >= input$MinYear)})
Upd.Pr_2 <- reactive({filter(Pr_2, Operador.Grupo == input$Operator & ano.mes >= input$MinYear)})
filetype = "csv"
output$download_data <- downloadHandler(
filename = function() {
paste("test.csv")
},
content = function(file) {
if(filetype == "csv"){
write_csv(Upd.Pr_1(), path = file)
}
}
)
output$description <- renderText({
paste0(nrow(Upd.Pr_1()))})
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = Upd.Pr_2(),
aes(y = Importaciones, x = Exportaciones)) +
geom_polygon(data = zones, aes(y = Importaciones, x = Exportaciones, group = as.factor(group)), alpha = 0.5, fill = zones$color, color = zones$color, linetype = 0, inherit.aes = FALSE) +
geom_point(size = 2, aes(colour = Donante.Grupo)) +
geom_line(aes(color = Donante.Grupo), arrow = arrow(length=unit(0.30,"cm"), type = "closed")) +
geom_text(aes(label = Upd.Pr_2()[,"ano.mes"], y = Importaciones + 5000), size = 3, color = "grey29") +
scale_color_manual(values = sapply(levels(as.factor(Upd.Pr_2()[, "Donante.Grupo"])), function(x) switch(x, "Vodafone" = "#E60000", "Movistar" = "#00B6E8", "Masmovil" = "#FFE500", "Orange" = "#FF9800", "Resto" = "#01B8AA"))) +
coord_cartesian(xlim = c(0, max(Upd.Pr_2()[,c("Importaciones", "Exportaciones")]) * 1.04), ylim = c(0, max(Upd.Pr_2()[,c("Importaciones", "Exportaciones")]) * 1.04))
})
# #Operator images
#
# output$myImage <- renderImage({
#   # A temp file to save the output.
#   # This file will be removed later by renderImage
#   outfile <- tempfile(fileext = '.png')
#
#   # Generate the PNG
#   png(outfile, width = 400, height = 300)
#   img()
#   hist(rnorm(10), main = "Generated in renderImage()")
#   dev.off()
#
#   # Return a list containing the filename
#   list(src = outfile,
#        contentType = 'image/png',
#        width = 400,
#        height = 300,
#        alt = "This is alternate text")
# }, deleteFile = TRUE)
#
# output$Op1 <- renderImage({ f = tempfile(fileext = '.png')
# png(f, width = 200, height = 100)
# list(src = f)
# },deleteFile = TRUE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
# output$Op2 <- renderImage({list(src = "C:\\Users\\a1380\\Desktop\\Portability Project\\VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = TRUE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
# output$Op3 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = FALSE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
# output$Op4 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = FALSE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
# output$Op5 <- renderImage({list(src = "VODAFONE.png", contentType = "image/png", width = 200, height = 100)},deleteFile = FALSE) #renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})renderImage({if(input$Operator == "Vodafone") "VODAFONE.png" else "VODAFONE_LIGHT.png"})
#
# Create rawtable object the plotOutput function is expecting
output$rawtable <- DT::renderDataTable({DT::datatable(Upd.Pr_1(), options = list(pageLength = 10))}) #renderTable({Pr_1})
}
## 4.3 Running the app
shinyApp(ui = ui, server = server)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help("tempfile")
help(img)
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
help("imageOutput")
help("imageOutput")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
runApp("C:\\Users\\a1380\\Desktop\\Portability Project")
